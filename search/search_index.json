{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SoftwareentwicklungsProzess mit Github","text":"<p>Git erlaubt es allen Entwicklern gleichzeitig Features zu entwickeln. Hierzu existieren diverse Techniken Git zu nutzen. Die bekanntesten hierbei sind:</p> <ul> <li>Git Flow</li> <li>Git(Hub) Flow</li> <li>Trunk-based </li> </ul> <p>Der Github Flow ist eine vereinfachte Version des von der CMI verwendeten Git Flows. F\u00fcr gr\u00f6ssere Organisationen ist dieser Workflow v\u00f6llig ungeeignet, weshalb hier nicht weiter auf diesen eingegangen wird. Infos zu diesem Flow lassen sich direkt bei Github finden.</p>"},{"location":"#terminologie","title":"Terminologie","text":"<p>Die in der CMI verwendete Versionierungs-Software lautet git, bzw. Github in seiner libgit2 Implementation. Git bietet hier viele Funktionalit\u00e4ten. In diesem Dokument werden die Folgenden genutzt:</p>"},{"location":"#branch","title":"Branch","text":"<p>Ein Branch bildet einen Zustand des vollst\u00e4ndigen Codes ab und fungiert damit quasi als Zeiger auf einen bestimmten Commit. Releases werden stets aus einem Branch heraus erstellt. Ein Branch wird in den folgenden Graphen als Linie dargestellt</p>"},{"location":"#commit","title":"Commit","text":"<p>Ein Commit bildet eine Art Snapshot, der die \u00c4nderungen des Entwicklers enth\u00e4lt. Wenn ein Release gebaut wird, geschieht dies im Regelfall auf dem aktuellsten Commit des Branches. Ein Commit wird in den folgenden Graphen als Knoten dargestellt.</p>"},{"location":"#merge","title":"Merge","text":"<p>Als merge wird der Vorgang bezeichnet, der alle Commits ( und somit alle \u00c4nderungen ) eines Branches in einen anderen Branch \u00fcbernimmt. Im Regelfall passiert das, sobald die Entwicklung eines Youtrack issues abgeschlossen ist. Der initiierende Branch des Merges wird im Anschluss an den Vorgang gel\u00f6scht.</p>"},{"location":"#cherrypick","title":"CherryPick","text":"<p>Der CherryPick erlaubt es, einen beliebigen Commit an der Spitze eines anderen Branches zu duplizieren. W\u00e4hrend der merge es noch erzwingt, dass beide Branches den gleichen Ursprung haben ( zB aus dem gleichen Branch heraus entstanden sind ), muss f\u00fcr einen CherryPick diese Bedingung nicht erf\u00fcllt sein. In der Praxis geht das Brechen dieser Bedingung oft mit MergeKonflikten oder unerw\u00fcnschten Seiteneffekten einher. Mit der steigenden Anzahl an CherryPicks w\u00e4chst dieses Gefahrenpotential exponentiell.</p>"},{"location":"#git-flow","title":"Git Flow","text":"<p>Der Gitflow ist der \u00e4lteste Workflow und ist zusammen mit Git und Github gewachsen. In der CMI wird dieser Workflow ebenfalls verwendet und kann dann beispielsweise so aussehen:  </p> <pre><code>%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true, 'showCommitLabel':true,'mainBranchName': 'master'}} }%%\ngitGraph\n        commit\n        branch develop\n        branch featureA\n        branch featureB\n        branch v.23.0\n        branch release/v23.0.1\n        branch v.23.1\n        branch release/v.23.1.1\n        checkout featureA\n        commit\n        commit\n        checkout featureB\n        commit\n        commit\n        checkout featureA\n        commit\n        checkout featureB\n        commit\n        checkout develop\n        merge featureA tag: \"0.1.0\"\n        checkout featureB\n        commit\n        merge develop\n        commit\n        commit\n        checkout develop\n        merge featureB tag: \"0.1.0\"\n        checkout v.23.0\n        merge develop\n        checkout master\n        merge v.23.0 tag: \"v.23.0.0\"\n        branch featureC\n        merge develop\n        commit id:\"cc1\"\n        commit id: \"cc2\"\n        checkout develop\n        merge featureC\n        checkout release/v23.0.1\n        cherry-pick id: \"cc1\"\n        cherry-pick id: \"cc2\"\n        branch featureD\n        merge develop\n        commit id:\"dc1\"\n        commit id: \"dc2\"\n        checkout develop\n        merge featureD\n        checkout release/v23.0.1\n        cherry-pick id: \"dc1\"\n        cherry-pick id: \"dc2\"\n        checkout release/v.23.1.1\n        cherry-pick id: \"dc1\"\n        cherry-pick id: \"dc2\"\n        checkout v.23.0\n        merge release/v23.0.1\n        checkout master\n        merge v.23.0 tag: \"v.23.0.1\"\n        checkout v.23.1\n        merge release/v.23.1.1\n        checkout master\n        merge release/v.23.1.1 tag: \"v.23.1.1\"\n</code></pre> <p>Die wichtigsten Branches tragen hierbei den Namen master und develop. Den Branch master ( neuerdings auch gerne main ) bezeichnet man ebenfalls als \"Trunk\". So wie bei einem echten Baum wird der Baumstumpf nie entfernt, sollte nicht der ganze Baum entfernt werden.  </p> <p>Umkreist werden diese Branches dann von FeatureBranches, Bugfixbranches, Hotfix branches. Zus\u00e4tzlich existieren allerdings viele trunk-\u00e4hnlichen release Branches, die in der CMI dann nach dem Entwicklungsjahr benannt sind ( e.g v.23.X )</p>"},{"location":"#vorteile","title":"Vorteile","text":"<ul> <li>Entwickler k\u00f6nnen vollst\u00e4ndig dezentralisiert arbeiten und m\u00fcssen nur hin und wieder ihren die Trunks in ihre Branches mergen</li> <li>Einfacher Einstieg nach Git f\u00fcr Junior Entwickler</li> <li>Klare Trennung zwischen Entwicklungs und Produktionsst\u00e4nden</li> </ul>"},{"location":"#nachteile","title":"Nachteile","text":"<ul> <li>Die gewaltige Menge an Releases und Patch Branches macht es fast unm\u00f6glich noch eine \u00dcbersicht zu behalten</li> <li>Cherrypicks in die ReleaseBranches werden ben\u00f6tigt, wodurch unerw\u00fcnschte Seiteneffekte durch picken in der falschen Reihenfolge oder Merge Konfltikte passieren</li> <li>Merge Konflikte sind gross und Komplex und ben\u00f6tigen des \u00d6fteren einen \"Git Profi\", der diese dann l\u00f6st</li> <li>Sehr tr\u00e4ge ReleaseFrequenz</li> </ul>"},{"location":"#nachteile-cmi","title":"Nachteile ( CMI )","text":"<ul> <li>Features m\u00fcssen gebackported werden und erzeugen die Gefahr unerw\u00fcnschter Seiteneffekte</li> <li>FeatureBackporting ist oft durch die ver\u00e4nderte Codebasis nicht m\u00f6glich und ben\u00f6tigt dadurch ver\u00e4nderten Code zwischen dem Trunk, der auf der KV getestet wird,   und dem Release Stand, der Schlussendlich an die Kunden verteilt wird</li> <li>Features werden vor der Freigabe eines Releases kaum getestet ( h\u00e4ngt allerdings nur indirekt mit dem ReleaseModell zusammen )</li> <li>Viele verschiedene ReleaseSt\u00e4nde ( Projektreleases !), obwohl der GitFlow traditionell nur einen einzigen Release Branch vorsieht</li> <li>Dll patches nehmen selbst den freigegebenen St\u00e4nden ihre Homogenit\u00e4t</li> </ul>"},{"location":"#trunkbased-development","title":"Trunkbased Development","text":"<p>Eine Alternative ist hierzu das sog. TrunkBasedDevelopment. Der grosse Vorteil dieser Methodik liegt darin, dass deutlich weniger Branches existieren. Dadruch werden weniger Cherrypicks und Tests \u00e4lterer St\u00e4nde ben\u00f6tigt. Als Ergebnis erzeugt dies mehr Zeit f\u00fcr die tats\u00e4chliche Entwicklung des Produkts.  </p> <p>Dieses Verahren wird in der CMI bereits f\u00fcr die meisten Microservices ( STS, WebDav, Push, etc.) verwendet. Weiterhin wurde zB das GWR3.0 Projekt nach diesem Stil erfolgreich entwickelt.  </p> <pre><code>%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true, 'showCommitLabel':true,'mainBranchName': 'master'}} }%%\ngitGraph\n        commit\n        branch Task1\n        branch Task2\n        checkout Task1\n        commit\n        commit\n\n        checkout Task2\n        commit\n        checkout master\n        merge Task2 id: \"23.4.0\" type: HIGHLIGHT\n        checkout Task1\n        merge master\n        commit\n        checkout master\n        merge Task1 id: \"23.5.0\" type: HIGHLIGHT\n        branch featureA\n        branch A/Task1\n        branch A/Task2\n        checkout featureA\n        commit id: \"initial\"\n        checkout A/Task1\n        commit\n        commit\n        checkout A/Task2\n        commit\n        checkout featureA\n        merge A/Task2\n        checkout A/Task1\n        merge featureA\n        checkout master\n        branch Task3\n        commit\n        checkout master\n        branch bugfix1\n        commit\n        checkout master\n        merge bugfix1 id: \"23.5.1\"\n        merge Task3 id: \"23.6.0\" type: HIGHLIGHT\n        checkout featureA\n        merge master\n        checkout A/Task1\n        merge featureA\n        commit\n        checkout featureA\n        merge A/Task1\n        checkout master\n        merge featureA\n</code></pre>"},{"location":"#vorteile_1","title":"Vorteile","text":"<ul> <li>Immens weniger Wartungsaufwand durch weniger Branches</li> <li>Sehr gute Integration in CI/CD Workflows erlaubt es zB dem PM ein Feature w\u00f6hrend der Entwicklung tats\u00e4chlich \"wachsen zu sehen\"</li> <li>Schnellere Releases</li> <li>Nur selten Konflikte w\u00e4hrend des Merges</li> <li>Keine \"Feature Freezes\" ben\u00f6tigt</li> <li>Entwickler eines Features erhalten etwas mehr Freiheiten w\u00e4hrend der Entwicklung</li> <li>Entwickler m\u00fcssen weniger Zeit f\u00fcr die Reproduktion von Bugs aufwenden</li> </ul>"},{"location":"#nachteile_1","title":"Nachteile","text":"<ul> <li>In der Realit\u00e4t nur zusammen mit CI/CD hilfreich ( Ist im CMI System bereits vorhanden )</li> <li>Langlebige Feature Branches m\u00fcssen ca alle 1-2 Wochen gerebased werden um merge Konflikte zu vermeiden</li> <li>Entwickler eines Features erhalten etwas mehr Freiheiten w\u00e4hrend der Entwicklung, wodurch das PM   dementsprechend weniger Kontrolle \u00fcber die Features eines Releases hat</li> </ul>"},{"location":"#nachteile-cmi_1","title":"Nachteile ( CMI )","text":"<ul> <li>Neues Versionierungsmodell muss erst kommuniziert werden</li> <li>M\u00f6glicherweise fehlt bei manchen Kunden die Akzeptanz f\u00fcr dieses Model</li> </ul>"},{"location":"ArrayLength/","title":"Length Benchmarks","text":"<p>Figuring out the most efficient way to compare </p> SourceCode <pre><code>using BenchmarkDotNet.Attributes;\nusing BenchmarkDotNet.Jobs;\n\nnamespace Benchmarkz;\n\n[SimpleJob(RuntimeMoniker.Net48)]\n[SimpleJob(RuntimeMoniker.Net60)]\n[SimpleJob(RuntimeMoniker.Net80)]\n[MemoryDiagnoser(displayGenColumns: true)]\npublic class AnyBenchmark\n{\n    private uint[] smallArray;\n    private uint[] mediumArray;\n    private uint[] bigArray;\n    private List&lt;uint&gt; bigList;\n    private HashSet&lt;uint&gt; bigHashset;\n    private IEnumerable&lt;uint&gt; bigEnumerable;\n\n    [GlobalSetup]\n    public void GlobalSetup()\n    {\n        smallArray = FillArray(100).ToArray();\n        mediumArray = FillArray(10000).ToArray();\n        bigArray = FillArray(1000000).ToArray();\n        bigList = FillArray(1000000).ToList();\n        bigHashset = FillArray(1000000).ToHashSet();\n        bigEnumerable = FillArray(1000000);\n    }\n\n    [Benchmark]\n    public void AnySmall() =&gt; _ = smallArray.Any();\n\n    [Benchmark]\n    public void AnyMedium() =&gt; _ = mediumArray.Any();\n\n    [Benchmark]\n    public void AnyBig() =&gt; _ = bigArray.Any();\n\n    [Benchmark]\n    public void AnyBigList() =&gt; _ = bigList.Any();\n\n    [Benchmark]\n    public void AnyBigHashet() =&gt; _ = bigHashset.Any();\n\n    [Benchmark]\n    public void AnyBigEnum() =&gt; _ = bigEnumerable.Any();\n\n    [Benchmark]\n    public void LenghtSmall() =&gt; _ = smallArray.Length != 0;\n\n    [Benchmark]\n    public void LenghtMedium() =&gt; _ = mediumArray.Length != 0;\n\n    [Benchmark(Baseline = true)]\n    public void LenghtBig() =&gt; _ = bigArray.Length != 0;\n\n    [Benchmark]\n    public void LenghtBigList() =&gt; _ = bigList.Count != 0;\n\n    [Benchmark]\n    public void LenghtBigHashet() =&gt; _ = bigHashset.Count != 0;\n\n    [Benchmark]\n    public void LenghtBigEnum() =&gt; _ = bigEnumerable.Count() != 0;\n\n\n    [Benchmark]\n    public void TakeCountSmall() =&gt; _ = smallArray.Take(1).Count() == 1;\n\n    [Benchmark]\n    public void TakeCountMedium() =&gt; _ = mediumArray.Take(1).Count() == 1;\n\n    [Benchmark]\n    public void TakeCountBig() =&gt; _ = bigArray.Take(1).Count() == 1;\n\n    [Benchmark]\n    public void TakeCountBigList() =&gt; _ = bigList.Take(1).Count() == 1;\n\n    [Benchmark]\n    public void TakeCountBigHashet() =&gt; _ = bigHashset.Take(1).Count() == 1;\n\n    [Benchmark]\n    public void TakeCountBigEnum() =&gt; _ = bigEnumerable.Take(1).Count() == 1;\n\n    [Benchmark]\n    public void EnumeratorCheckSmall() =&gt; _ = EnumMagic(smallArray);\n\n    [Benchmark]\n    public void EnumeratorCheckMedium() =&gt; _ = EnumMagic(mediumArray);\n\n    [Benchmark]\n    public void EnumeratorCheckBig() =&gt; _ = EnumMagic(bigArray);\n\n    [Benchmark]\n    public void EnumeratorCheckBigList() =&gt; _ = EnumMagic(bigList);\n\n    [Benchmark]\n    public void EnumeratorCheckBigHashset() =&gt; _ = EnumMagic(bigHashset);\n\n    [Benchmark]\n    public void EnumeratorCheckBigEnumerable() =&gt; _ = EnumMagic(bigEnumerable);\n\n    private static IEnumerable&lt;uint&gt; FillArray(uint count)\n    {\n        for (uint i = 0; i &lt; count; i++)\n            yield return i;\n    }\n\n// net48 lacks TryGetNonEnumeratedCount\n#if NET6_0_OR_GREATER\n    private static bool EnumMagic&lt;T&gt;(IEnumerable&lt;T&gt; source)\n    {\n        if (source.TryGetNonEnumeratedCount(out var count))\n            return count &gt; 1;\n\n        using var enumerator = source.GetEnumerator();\n        return enumerator.MoveNext();\n    }\n#else\n    private static bool EnumMagic&lt;T&gt;(IEnumerable&lt;T&gt; source)\n    {\n        using var enumerator = source.GetEnumerator();\n        return enumerator.MoveNext();\n    }\n#endif\n}\n</code></pre> <pre><code>// * Detailed results *\nAnyBenchmark.AnySmall: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.519 ns, StdErr = 0.037 ns (0.67%), N = 35, StdDev = 0.218 ns\nMin = 5.264 ns, Q1 = 5.335 ns, Median = 5.425 ns, Q3 = 5.734 ns, Max = 5.989 ns\nIQR = 0.399 ns, LowerFence = 4.736 ns, UpperFence = 6.333 ns\nConfidenceInterval = [5.387 ns; 5.652 ns] (CI 99.9%), Margin = 0.133 ns (2.40% of Mean)\nSkewness = 0.49, Kurtosis = 1.78, MValue = 2.44\n-------------------- Histogram --------------------\n[5.257 ns ; 5.432 ns) | @@@@@@@@@@@@@@@@@@\n[5.432 ns ; 5.627 ns) | @@@@@@\n[5.627 ns ; 5.893 ns) | @@@@@@@@@@\n[5.893 ns ; 6.077 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.AnyMedium: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.154 ns, StdErr = 0.002 ns (0.04%), N = 13, StdDev = 0.007 ns\nMin = 5.142 ns, Q1 = 5.150 ns, Median = 5.156 ns, Q3 = 5.158 ns, Max = 5.170 ns\nIQR = 0.008 ns, LowerFence = 5.138 ns, UpperFence = 5.171 ns\nConfidenceInterval = [5.146 ns; 5.163 ns] (CI 99.9%), Margin = 0.009 ns (0.17% of Mean)\nSkewness = 0.29, Kurtosis = 2.58, MValue = 2\n-------------------- Histogram --------------------\n[5.138 ns ; 5.174 ns) | @@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBig: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.639 ns, StdErr = 0.004 ns (0.06%), N = 15, StdDev = 0.014 ns\nMin = 5.613 ns, Q1 = 5.630 ns, Median = 5.638 ns, Q3 = 5.646 ns, Max = 5.667 ns\nIQR = 0.016 ns, LowerFence = 5.606 ns, UpperFence = 5.670 ns\nConfidenceInterval = [5.624 ns; 5.653 ns] (CI 99.9%), Margin = 0.015 ns (0.26% of Mean)\nSkewness = 0.33, Kurtosis = 2.38, MValue = 2\n-------------------- Histogram --------------------\n[5.606 ns ; 5.674 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBigList: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 3.467 ns, StdErr = 0.002 ns (0.07%), N = 13, StdDev = 0.009 ns\nMin = 3.447 ns, Q1 = 3.465 ns, Median = 3.465 ns, Q3 = 3.475 ns, Max = 3.479 ns\nIQR = 0.010 ns, LowerFence = 3.450 ns, UpperFence = 3.490 ns\nConfidenceInterval = [3.456 ns; 3.477 ns] (CI 99.9%), Margin = 0.010 ns (0.30% of Mean)\nSkewness = -0.57, Kurtosis = 2.8, MValue = 2\n-------------------- Histogram --------------------\n[3.442 ns ; 3.484 ns) | @@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBigHashet: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 3.441 ns, StdErr = 0.003 ns (0.07%), N = 15, StdDev = 0.010 ns\nMin = 3.417 ns, Q1 = 3.436 ns, Median = 3.442 ns, Q3 = 3.447 ns, Max = 3.457 ns\nIQR = 0.012 ns, LowerFence = 3.419 ns, UpperFence = 3.465 ns\nConfidenceInterval = [3.431 ns; 3.452 ns] (CI 99.9%), Margin = 0.010 ns (0.30% of Mean)\nSkewness = -0.58, Kurtosis = 3.15, MValue = 2\n-------------------- Histogram --------------------\n[3.412 ns ; 3.463 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBigEnum: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 11.739 ns, StdErr = 0.022 ns (0.19%), N = 14, StdDev = 0.083 ns\nMin = 11.629 ns, Q1 = 11.682 ns, Median = 11.713 ns, Q3 = 11.785 ns, Max = 11.889 ns\nIQR = 0.103 ns, LowerFence = 11.528 ns, UpperFence = 11.939 ns\nConfidenceInterval = [11.645 ns; 11.833 ns] (CI 99.9%), Margin = 0.094 ns (0.80% of Mean)\nSkewness = 0.56, Kurtosis = 1.85, MValue = 2\n-------------------- Histogram --------------------\n[11.583 ns ; 11.934 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.LenghtSmall: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.000 ns, StdErr = 0.000 ns (NaN%), N = 15, StdDev = 0.000 ns\nMin = 0.000 ns, Q1 = 0.000 ns, Median = 0.000 ns, Q3 = 0.000 ns, Max = 0.000 ns\nIQR = 0.000 ns, LowerFence = 0.000 ns, UpperFence = 0.000 ns\nConfidenceInterval = [0.000 ns; 0.000 ns] (CI 99.9%), Margin = 0.000 ns (NaN% of Mean)\nSkewness = NaN, Kurtosis = NaN, MValue = 2\n-------------------- Histogram --------------------\n[-0.500 ns ; 0.500 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.LenghtMedium: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.000 ns, StdErr = 0.000 ns (100.00%), N = 12, StdDev = 0.002 ns\nMin = 0.000 ns, Q1 = 0.000 ns, Median = 0.000 ns, Q3 = 0.000 ns, Max = 0.006 ns\nIQR = 0.000 ns, LowerFence = 0.000 ns, UpperFence = 0.000 ns\nConfidenceInterval = [-0.002 ns; 0.002 ns] (CI 99.9%), Margin = 0.002 ns (443.70% of Mean)\nSkewness = 2.65, Kurtosis = 8.48, MValue = 2\n-------------------- Histogram --------------------\n[-0.001 ns ; 0.001 ns) | @@@@@@@@@@@\n[ 0.001 ns ; 0.003 ns) |\n[ 0.003 ns ; 0.005 ns) |\n[ 0.005 ns ; 0.007 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.LenghtBig: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.000 ns, StdErr = 0.000 ns (74.06%), N = 15, StdDev = 0.001 ns\nMin = 0.000 ns, Q1 = 0.000 ns, Median = 0.000 ns, Q3 = 0.000 ns, Max = 0.003 ns\nIQR = 0.000 ns, LowerFence = 0.000 ns, UpperFence = 0.000 ns\nConfidenceInterval = [-0.001 ns; 0.001 ns] (CI 99.9%), Margin = 0.001 ns (306.64% of Mean)\nSkewness = 2.65, Kurtosis = 9, MValue = 2\n-------------------- Histogram --------------------\n[-0.000 ns ; 0.001 ns) | @@@@@@@@@@@@@\n[ 0.001 ns ; 0.001 ns) | @\n[ 0.001 ns ; 0.002 ns) |\n[ 0.002 ns ; 0.003 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.LenghtBigList: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.000 ns, StdErr = 0.000 ns (100.00%), N = 15, StdDev = 0.001 ns\nMin = 0.000 ns, Q1 = 0.000 ns, Median = 0.000 ns, Q3 = 0.000 ns, Max = 0.002 ns\nIQR = 0.000 ns, LowerFence = 0.000 ns, UpperFence = 0.000 ns\nConfidenceInterval = [-0.001 ns; 0.001 ns] (CI 99.9%), Margin = 0.001 ns (414.05% of Mean)\nSkewness = 3.13, Kurtosis = 11.39, MValue = 2\n-------------------- Histogram --------------------\n[-0.000 ns ; 0.000 ns) | @@@@@@@@@@@@@@\n[ 0.000 ns ; 0.001 ns) |\n[ 0.001 ns ; 0.002 ns) |\n[ 0.002 ns ; 0.002 ns) |\n[ 0.002 ns ; 0.003 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.LenghtBigHashet: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.002 ns, StdErr = 0.001 ns (22.84%), N = 13, StdDev = 0.002 ns\nMin = 0.000 ns, Q1 = 0.001 ns, Median = 0.002 ns, Q3 = 0.003 ns, Max = 0.006 ns\nIQR = 0.003 ns, LowerFence = -0.004 ns, UpperFence = 0.008 ns\nConfidenceInterval = [0.000 ns; 0.005 ns] (CI 99.9%), Margin = 0.002 ns (98.60% of Mean)\nSkewness = 0.26, Kurtosis = 1.74, MValue = 2\n-------------------- Histogram --------------------\n[-0.001 ns ; 0.001 ns) | @@@@\n[ 0.001 ns ; 0.004 ns) | @@@@@@\n[ 0.004 ns ; 0.006 ns) | @@@\n---------------------------------------------------\n\nAnyBenchmark.LenghtBigEnum: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 2.227 ms, StdErr = 0.004 ms (0.19%), N = 15, StdDev = 0.016 ms\nMin = 2.190 ms, Q1 = 2.219 ms, Median = 2.233 ms, Q3 = 2.237 ms, Max = 2.244 ms\nIQR = 0.019 ms, LowerFence = 2.190 ms, UpperFence = 2.266 ms\nConfidenceInterval = [2.209 ms; 2.244 ms] (CI 99.9%), Margin = 0.017 ms (0.78% of Mean)\nSkewness = -1, Kurtosis = 2.83, MValue = 2\n-------------------- Histogram --------------------\n[2.181 ms ; 2.252 ms) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountSmall: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 22.853 ns, StdErr = 0.050 ns (0.22%), N = 13, StdDev = 0.181 ns\nMin = 22.520 ns, Q1 = 22.801 ns, Median = 22.863 ns, Q3 = 23.003 ns, Max = 23.174 ns\nIQR = 0.202 ns, LowerFence = 22.498 ns, UpperFence = 23.306 ns\nConfidenceInterval = [22.635 ns; 23.070 ns] (CI 99.9%), Margin = 0.217 ns (0.95% of Mean)\nSkewness = -0.16, Kurtosis = 2.11, MValue = 2\n-------------------- Histogram --------------------\n[22.418 ns ; 23.276 ns) | @@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountMedium: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 24.489 ns, StdErr = 0.060 ns (0.25%), N = 15, StdDev = 0.234 ns\nMin = 24.029 ns, Q1 = 24.358 ns, Median = 24.508 ns, Q3 = 24.580 ns, Max = 24.895 ns\nIQR = 0.222 ns, LowerFence = 24.025 ns, UpperFence = 24.913 ns\nConfidenceInterval = [24.238 ns; 24.739 ns] (CI 99.9%), Margin = 0.250 ns (1.02% of Mean)\nSkewness = -0.02, Kurtosis = 2.26, MValue = 2\n-------------------- Histogram --------------------\n[23.904 ns ; 25.020 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBig: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 22.727 ns, StdErr = 0.058 ns (0.25%), N = 15, StdDev = 0.224 ns\nMin = 22.127 ns, Q1 = 22.640 ns, Median = 22.805 ns, Q3 = 22.895 ns, Max = 22.943 ns\nIQR = 0.255 ns, LowerFence = 22.258 ns, UpperFence = 23.277 ns\nConfidenceInterval = [22.487 ns; 22.966 ns] (CI 99.9%), Margin = 0.240 ns (1.05% of Mean)\nSkewness = -1.29, Kurtosis = 3.93, MValue = 2\n-------------------- Histogram --------------------\n[22.008 ns ; 22.597 ns) | @@\n[22.597 ns ; 23.063 ns) | @@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBigList: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 20.223 ns, StdErr = 0.026 ns (0.13%), N = 14, StdDev = 0.097 ns\nMin = 19.935 ns, Q1 = 20.209 ns, Median = 20.251 ns, Q3 = 20.279 ns, Max = 20.314 ns\nIQR = 0.069 ns, LowerFence = 20.105 ns, UpperFence = 20.383 ns\nConfidenceInterval = [20.114 ns; 20.333 ns] (CI 99.9%), Margin = 0.110 ns (0.54% of Mean)\nSkewness = -1.79, Kurtosis = 5.74, MValue = 2\n-------------------- Histogram --------------------\n[19.882 ns ; 20.367 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBigHashet: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 30.938 ns, StdErr = 0.042 ns (0.14%), N = 15, StdDev = 0.162 ns\nMin = 30.469 ns, Q1 = 30.865 ns, Median = 31.001 ns, Q3 = 31.050 ns, Max = 31.090 ns\nIQR = 0.184 ns, LowerFence = 30.589 ns, UpperFence = 31.326 ns\nConfidenceInterval = [30.765 ns; 31.112 ns] (CI 99.9%), Margin = 0.173 ns (0.56% of Mean)\nSkewness = -1.55, Kurtosis = 4.92, MValue = 2\n-------------------- Histogram --------------------\n[30.383 ns ; 31.177 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBigEnum: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 26.098 ns, StdErr = 0.096 ns (0.37%), N = 15, StdDev = 0.370 ns\nMin = 25.253 ns, Q1 = 25.977 ns, Median = 26.034 ns, Q3 = 26.210 ns, Max = 26.809 ns\nIQR = 0.233 ns, LowerFence = 25.628 ns, UpperFence = 26.560 ns\nConfidenceInterval = [25.702 ns; 26.494 ns] (CI 99.9%), Margin = 0.396 ns (1.52% of Mean)\nSkewness = 0, Kurtosis = 3.28, MValue = 2\n-------------------- Histogram --------------------\n[25.056 ns ; 25.795 ns) | @\n[25.795 ns ; 26.912 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckSmall: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.959 ns, StdErr = 0.009 ns (0.15%), N = 15, StdDev = 0.034 ns\nMin = 5.906 ns, Q1 = 5.936 ns, Median = 5.956 ns, Q3 = 5.981 ns, Max = 6.017 ns\nIQR = 0.045 ns, LowerFence = 5.868 ns, UpperFence = 6.049 ns\nConfidenceInterval = [5.924 ns; 5.995 ns] (CI 99.9%), Margin = 0.036 ns (0.60% of Mean)\nSkewness = 0.08, Kurtosis = 1.76, MValue = 2\n-------------------- Histogram --------------------\n[5.888 ns ; 6.035 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckMedium: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.965 ns, StdErr = 0.008 ns (0.13%), N = 15, StdDev = 0.031 ns\nMin = 5.924 ns, Q1 = 5.945 ns, Median = 5.952 ns, Q3 = 6.001 ns, Max = 6.012 ns\nIQR = 0.056 ns, LowerFence = 5.861 ns, UpperFence = 6.086 ns\nConfidenceInterval = [5.932 ns; 5.998 ns] (CI 99.9%), Margin = 0.033 ns (0.55% of Mean)\nSkewness = 0.36, Kurtosis = 1.4, MValue = 2\n-------------------- Histogram --------------------\n[5.907 ns ; 6.029 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBig: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 6.496 ns, StdErr = 0.014 ns (0.21%), N = 15, StdDev = 0.053 ns\nMin = 6.436 ns, Q1 = 6.451 ns, Median = 6.489 ns, Q3 = 6.549 ns, Max = 6.595 ns\nIQR = 0.099 ns, LowerFence = 6.303 ns, UpperFence = 6.697 ns\nConfidenceInterval = [6.439 ns; 6.554 ns] (CI 99.9%), Margin = 0.057 ns (0.88% of Mean)\nSkewness = 0.4, Kurtosis = 1.52, MValue = 2\n-------------------- Histogram --------------------\n[6.408 ns ; 6.623 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBigList: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 4.062 ns, StdErr = 0.006 ns (0.16%), N = 15, StdDev = 0.025 ns\nMin = 4.025 ns, Q1 = 4.047 ns, Median = 4.057 ns, Q3 = 4.074 ns, Max = 4.104 ns\nIQR = 0.027 ns, LowerFence = 4.007 ns, UpperFence = 4.114 ns\nConfidenceInterval = [4.036 ns; 4.089 ns] (CI 99.9%), Margin = 0.027 ns (0.65% of Mean)\nSkewness = 0.4, Kurtosis = 1.97, MValue = 2\n-------------------- Histogram --------------------\n[4.015 ns ; 4.117 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBigHashset: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 4.069 ns, StdErr = 0.006 ns (0.14%), N = 14, StdDev = 0.021 ns\nMin = 4.041 ns, Q1 = 4.054 ns, Median = 4.066 ns, Q3 = 4.085 ns, Max = 4.117 ns\nIQR = 0.031 ns, LowerFence = 4.007 ns, UpperFence = 4.132 ns\nConfidenceInterval = [4.046 ns; 4.093 ns] (CI 99.9%), Margin = 0.024 ns (0.58% of Mean)\nSkewness = 0.6, Kurtosis = 2.38, MValue = 2\n-------------------- Histogram --------------------\n[4.029 ns ; 4.128 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBigEnumerable: Job-FQEJOX(Runtime=.NET 7.0, Toolchain=net70)\nRuntime = .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 14.742 ns, StdErr = 0.022 ns (0.15%), N = 15, StdDev = 0.084 ns\nMin = 14.518 ns, Q1 = 14.714 ns, Median = 14.758 ns, Q3 = 14.801 ns, Max = 14.849 ns\nIQR = 0.087 ns, LowerFence = 14.583 ns, UpperFence = 14.933 ns\nConfidenceInterval = [14.653 ns; 14.832 ns] (CI 99.9%), Margin = 0.089 ns (0.61% of Mean)\nSkewness = -1.02, Kurtosis = 3.94, MValue = 2\n-------------------- Histogram --------------------\n[14.473 ns ; 14.894 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnySmall: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.416 ns, StdErr = 0.032 ns (0.59%), N = 16, StdDev = 0.128 ns\nMin = 5.279 ns, Q1 = 5.311 ns, Median = 5.354 ns, Q3 = 5.520 ns, Max = 5.665 ns\nIQR = 0.209 ns, LowerFence = 4.997 ns, UpperFence = 5.834 ns\nConfidenceInterval = [5.286 ns; 5.546 ns] (CI 99.9%), Margin = 0.130 ns (2.40% of Mean)\nSkewness = 0.55, Kurtosis = 1.65, MValue = 2\n-------------------- Histogram --------------------\n[5.253 ns ; 5.387 ns) | @@@@@@@@@\n[5.387 ns ; 5.611 ns) | @@@@@@\n[5.611 ns ; 5.731 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.AnyMedium: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.254 ns, StdErr = 0.006 ns (0.11%), N = 14, StdDev = 0.021 ns\nMin = 5.217 ns, Q1 = 5.242 ns, Median = 5.259 ns, Q3 = 5.265 ns, Max = 5.293 ns\nIQR = 0.024 ns, LowerFence = 5.206 ns, UpperFence = 5.301 ns\nConfidenceInterval = [5.230 ns; 5.278 ns] (CI 99.9%), Margin = 0.024 ns (0.46% of Mean)\nSkewness = -0.3, Kurtosis = 2.17, MValue = 2\n-------------------- Histogram --------------------\n[5.206 ns ; 5.304 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBig: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.253 ns, StdErr = 0.006 ns (0.11%), N = 14, StdDev = 0.021 ns\nMin = 5.223 ns, Q1 = 5.236 ns, Median = 5.255 ns, Q3 = 5.266 ns, Max = 5.292 ns\nIQR = 0.030 ns, LowerFence = 5.192 ns, UpperFence = 5.310 ns\nConfidenceInterval = [5.230 ns; 5.277 ns] (CI 99.9%), Margin = 0.023 ns (0.45% of Mean)\nSkewness = 0.01, Kurtosis = 1.9, MValue = 2\n-------------------- Histogram --------------------\n[5.212 ns ; 5.304 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBigList: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 2.140 ns, StdErr = 0.006 ns (0.27%), N = 14, StdDev = 0.022 ns\nMin = 2.116 ns, Q1 = 2.126 ns, Median = 2.138 ns, Q3 = 2.153 ns, Max = 2.195 ns\nIQR = 0.027 ns, LowerFence = 2.085 ns, UpperFence = 2.194 ns\nConfidenceInterval = [2.116 ns; 2.165 ns] (CI 99.9%), Margin = 0.025 ns (1.16% of Mean)\nSkewness = 0.94, Kurtosis = 3.2, MValue = 2\n-------------------- Histogram --------------------\n[2.104 ns ; 2.149 ns) | @@@@@@@@@@\n[2.149 ns ; 2.207 ns) | @@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBigHashet: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 2.137 ns, StdErr = 0.005 ns (0.24%), N = 15, StdDev = 0.020 ns\nMin = 2.113 ns, Q1 = 2.122 ns, Median = 2.132 ns, Q3 = 2.151 ns, Max = 2.180 ns\nIQR = 0.029 ns, LowerFence = 2.079 ns, UpperFence = 2.194 ns\nConfidenceInterval = [2.115 ns; 2.158 ns] (CI 99.9%), Margin = 0.021 ns (1.00% of Mean)\nSkewness = 0.6, Kurtosis = 2.11, MValue = 2\n-------------------- Histogram --------------------\n[2.103 ns ; 2.190 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBigEnum: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 10.308 ns, StdErr = 0.024 ns (0.23%), N = 15, StdDev = 0.092 ns\nMin = 10.028 ns, Q1 = 10.287 ns, Median = 10.320 ns, Q3 = 10.366 ns, Max = 10.401 ns\nIQR = 0.079 ns, LowerFence = 10.168 ns, UpperFence = 10.485 ns\nConfidenceInterval = [10.209 ns; 10.406 ns] (CI 99.9%), Margin = 0.099 ns (0.96% of Mean)\nSkewness = -1.69, Kurtosis = 5.82, MValue = 2\n-------------------- Histogram --------------------\n[9.979 ns ; 10.450 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.LenghtSmall: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.000 ns, StdErr = 0.000 ns (47.98%), N = 12, StdDev = 0.000 ns\nMin = 0.000 ns, Q1 = 0.000 ns, Median = 0.000 ns, Q3 = 0.000 ns, Max = 0.001 ns\nIQR = 0.000 ns, LowerFence = -0.000 ns, UpperFence = 0.000 ns\nConfidenceInterval = [-0.000 ns; 0.000 ns] (CI 99.9%), Margin = 0.000 ns (212.89% of Mean)\nSkewness = 1.11, Kurtosis = 2.54, MValue = 2.25\n-------------------- Histogram --------------------\n[-0.000 ns ; 0.000 ns) | @@@@@@@@@\n[ 0.000 ns ; 0.001 ns) | @@\n[ 0.001 ns ; 0.001 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.LenghtMedium: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.000 ns, StdErr = 0.000 ns (86.80%), N = 14, StdDev = 0.000 ns\nMin = 0.000 ns, Q1 = 0.000 ns, Median = 0.000 ns, Q3 = 0.000 ns, Max = 0.001 ns\nIQR = 0.000 ns, LowerFence = 0.000 ns, UpperFence = 0.000 ns\nConfidenceInterval = [-0.000 ns; 0.001 ns] (CI 99.9%), Margin = 0.000 ns (366.38% of Mean)\nSkewness = 2.87, Kurtosis = 9.94, MValue = 2\n-------------------- Histogram --------------------\n[-0.000 ns ; 0.000 ns) | @@@@@@@@@@@@@\n[ 0.000 ns ; 0.001 ns) |\n[ 0.001 ns ; 0.001 ns) |\n[ 0.001 ns ; 0.002 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.LenghtBig: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.001 ns, StdErr = 0.000 ns (25.66%), N = 15, StdDev = 0.001 ns\nMin = 0.000 ns, Q1 = 0.000 ns, Median = 0.001 ns, Q3 = 0.002 ns, Max = 0.003 ns\nIQR = 0.002 ns, LowerFence = -0.002 ns, UpperFence = 0.004 ns\nConfidenceInterval = [-0.000 ns; 0.002 ns] (CI 99.9%), Margin = 0.001 ns (106.24% of Mean)\nSkewness = 0.42, Kurtosis = 1.7, MValue = 2\n-------------------- Histogram --------------------\n[-0.000 ns ; 0.001 ns) | @@@@@@@@@\n[ 0.001 ns ; 0.002 ns) | @@@@\n[ 0.002 ns ; 0.003 ns) | @@\n---------------------------------------------------\n\nAnyBenchmark.LenghtBigList: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.000 ns, StdErr = 0.000 ns (46.56%), N = 15, StdDev = 0.000 ns\nMin = 0.000 ns, Q1 = 0.000 ns, Median = 0.000 ns, Q3 = 0.000 ns, Max = 0.001 ns\nIQR = 0.000 ns, LowerFence = -0.000 ns, UpperFence = 0.001 ns\nConfidenceInterval = [-0.000 ns; 0.001 ns] (CI 99.9%), Margin = 0.000 ns (192.76% of Mean)\nSkewness = 1.48, Kurtosis = 3.87, MValue = 2.36\n-------------------- Histogram --------------------\n[-0.000 ns ; 0.000 ns) | @@@@@@@@@@@\n[ 0.000 ns ; 0.001 ns) |\n[ 0.001 ns ; 0.001 ns) | @@\n[ 0.001 ns ; 0.001 ns) | @\n[ 0.001 ns ; 0.002 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.LenghtBigHashet: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.000 ns, StdErr = 0.000 ns (100.00%), N = 12, StdDev = 0.000 ns\nMin = 0.000 ns, Q1 = 0.000 ns, Median = 0.000 ns, Q3 = 0.000 ns, Max = 0.000 ns\nIQR = 0.000 ns, LowerFence = 0.000 ns, UpperFence = 0.000 ns\nConfidenceInterval = [-0.000 ns; 0.000 ns] (CI 99.9%), Margin = 0.000 ns (443.70% of Mean)\nSkewness = 2.65, Kurtosis = 8.48, MValue = 2\n-------------------- Histogram --------------------\n[-0.000 ns ; 0.000 ns) | @@@@@@@@@@@\n[ 0.000 ns ; 0.000 ns) |\n[ 0.000 ns ; 0.000 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.LenghtBigEnum: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 661.041 us, StdErr = 3.048 us (0.46%), N = 16, StdDev = 12.193 us\nMin = 641.523 us, Q1 = 653.061 us, Median = 661.278 us, Q3 = 667.464 us, Max = 688.361 us\nIQR = 14.403 us, LowerFence = 631.456 us, UpperFence = 689.068 us\nConfidenceInterval = [648.627 us; 673.455 us] (CI 99.9%), Margin = 12.414 us (1.88% of Mean)\nSkewness = 0.43, Kurtosis = 2.54, MValue = 2\n-------------------- Histogram --------------------\n[638.124 us ; 664.195 us) | @@@@@@@@@@@\n[664.195 us ; 678.795 us) | @@@@\n[678.795 us ; 694.712 us) | @\n---------------------------------------------------\n\nAnyBenchmark.TakeCountSmall: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 16.587 ns, StdErr = 0.071 ns (0.43%), N = 13, StdDev = 0.256 ns\nMin = 16.354 ns, Q1 = 16.381 ns, Median = 16.504 ns, Q3 = 16.688 ns, Max = 17.267 ns\nIQR = 0.307 ns, LowerFence = 15.920 ns, UpperFence = 17.149 ns\nConfidenceInterval = [16.281 ns; 16.894 ns] (CI 99.9%), Margin = 0.307 ns (1.85% of Mean)\nSkewness = 1.31, Kurtosis = 4.07, MValue = 2\n-------------------- Histogram --------------------\n[16.325 ns ; 16.920 ns) | @@@@@@@@@@@@\n[16.920 ns ; 17.410 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.TakeCountMedium: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 16.467 ns, StdErr = 0.028 ns (0.17%), N = 15, StdDev = 0.109 ns\nMin = 16.273 ns, Q1 = 16.395 ns, Median = 16.483 ns, Q3 = 16.525 ns, Max = 16.703 ns\nIQR = 0.130 ns, LowerFence = 16.199 ns, UpperFence = 16.720 ns\nConfidenceInterval = [16.351 ns; 16.584 ns] (CI 99.9%), Margin = 0.117 ns (0.71% of Mean)\nSkewness = 0.26, Kurtosis = 2.47, MValue = 2\n-------------------- Histogram --------------------\n[16.215 ns ; 16.761 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBig: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 17.432 ns, StdErr = 0.033 ns (0.19%), N = 15, StdDev = 0.128 ns\nMin = 17.227 ns, Q1 = 17.349 ns, Median = 17.426 ns, Q3 = 17.535 ns, Max = 17.643 ns\nIQR = 0.186 ns, LowerFence = 17.069 ns, UpperFence = 17.815 ns\nConfidenceInterval = [17.295 ns; 17.569 ns] (CI 99.9%), Margin = 0.137 ns (0.78% of Mean)\nSkewness = -0.01, Kurtosis = 1.77, MValue = 2\n-------------------- Histogram --------------------\n[17.227 ns ; 17.712 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBigList: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 12.623 ns, StdErr = 0.030 ns (0.24%), N = 13, StdDev = 0.108 ns\nMin = 12.475 ns, Q1 = 12.560 ns, Median = 12.594 ns, Q3 = 12.655 ns, Max = 12.885 ns\nIQR = 0.096 ns, LowerFence = 12.416 ns, UpperFence = 12.799 ns\nConfidenceInterval = [12.493 ns; 12.753 ns] (CI 99.9%), Margin = 0.130 ns (1.03% of Mean)\nSkewness = 1, Kurtosis = 3.25, MValue = 2\n-------------------- Histogram --------------------\n[12.457 ns ; 12.946 ns) | @@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBigHashet: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 22.107 ns, StdErr = 0.052 ns (0.24%), N = 15, StdDev = 0.203 ns\nMin = 21.500 ns, Q1 = 22.052 ns, Median = 22.138 ns, Q3 = 22.219 ns, Max = 22.343 ns\nIQR = 0.167 ns, LowerFence = 21.803 ns, UpperFence = 22.469 ns\nConfidenceInterval = [21.891 ns; 22.324 ns] (CI 99.9%), Margin = 0.217 ns (0.98% of Mean)\nSkewness = -1.64, Kurtosis = 5.63, MValue = 2\n-------------------- Histogram --------------------\n[21.393 ns ; 22.451 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBigEnum: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 19.493 ns, StdErr = 0.055 ns (0.28%), N = 13, StdDev = 0.198 ns\nMin = 18.940 ns, Q1 = 19.468 ns, Median = 19.498 ns, Q3 = 19.533 ns, Max = 19.826 ns\nIQR = 0.065 ns, LowerFence = 19.369 ns, UpperFence = 19.631 ns\nConfidenceInterval = [19.256 ns; 19.730 ns] (CI 99.9%), Margin = 0.237 ns (1.21% of Mean)\nSkewness = -1.24, Kurtosis = 5.41, MValue = 2\n-------------------- Histogram --------------------\n[18.830 ns ; 19.293 ns) | @\n[19.293 ns ; 19.936 ns) | @@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckSmall: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.201 ns, StdErr = 0.007 ns (0.14%), N = 15, StdDev = 0.027 ns\nMin = 5.131 ns, Q1 = 5.188 ns, Median = 5.199 ns, Q3 = 5.223 ns, Max = 5.233 ns\nIQR = 0.035 ns, LowerFence = 5.135 ns, UpperFence = 5.277 ns\nConfidenceInterval = [5.172 ns; 5.231 ns] (CI 99.9%), Margin = 0.029 ns (0.56% of Mean)\nSkewness = -0.87, Kurtosis = 3.26, MValue = 2\n-------------------- Histogram --------------------\n[5.117 ns ; 5.248 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckMedium: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.208 ns, StdErr = 0.013 ns (0.25%), N = 15, StdDev = 0.051 ns\nMin = 5.118 ns, Q1 = 5.168 ns, Median = 5.212 ns, Q3 = 5.244 ns, Max = 5.276 ns\nIQR = 0.076 ns, LowerFence = 5.054 ns, UpperFence = 5.357 ns\nConfidenceInterval = [5.154 ns; 5.262 ns] (CI 99.9%), Margin = 0.054 ns (1.04% of Mean)\nSkewness = -0.08, Kurtosis = 1.55, MValue = 2\n-------------------- Histogram --------------------\n[5.114 ns ; 5.304 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBig: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.455 ns, StdErr = 0.035 ns (0.64%), N = 24, StdDev = 0.170 ns\nMin = 5.231 ns, Q1 = 5.327 ns, Median = 5.411 ns, Q3 = 5.566 ns, Max = 5.813 ns\nIQR = 0.239 ns, LowerFence = 4.969 ns, UpperFence = 5.924 ns\nConfidenceInterval = [5.324 ns; 5.586 ns] (CI 99.9%), Margin = 0.131 ns (2.40% of Mean)\nSkewness = 0.59, Kurtosis = 2.17, MValue = 2\n-------------------- Histogram --------------------\n[5.225 ns ; 5.482 ns) | @@@@@@@@@@@@@\n[5.482 ns ; 5.637 ns) | @@@@@@@\n[5.637 ns ; 5.819 ns) | @@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBigList: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 1.633 ns, StdErr = 0.006 ns (0.35%), N = 13, StdDev = 0.020 ns\nMin = 1.597 ns, Q1 = 1.623 ns, Median = 1.631 ns, Q3 = 1.646 ns, Max = 1.664 ns\nIQR = 0.024 ns, LowerFence = 1.587 ns, UpperFence = 1.682 ns\nConfidenceInterval = [1.609 ns; 1.657 ns] (CI 99.9%), Margin = 0.024 ns (1.49% of Mean)\nSkewness = -0.03, Kurtosis = 1.74, MValue = 2\n-------------------- Histogram --------------------\n[1.586 ns ; 1.670 ns) | @@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBigHashset: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 1.900 ns, StdErr = 0.005 ns (0.25%), N = 15, StdDev = 0.018 ns\nMin = 1.864 ns, Q1 = 1.888 ns, Median = 1.905 ns, Q3 = 1.907 ns, Max = 1.931 ns\nIQR = 0.019 ns, LowerFence = 1.860 ns, UpperFence = 1.935 ns\nConfidenceInterval = [1.881 ns; 1.920 ns] (CI 99.9%), Margin = 0.020 ns (1.03% of Mean)\nSkewness = -0.13, Kurtosis = 2.23, MValue = 2\n-------------------- Histogram --------------------\n[1.854 ns ; 1.941 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBigEnumerable: Job-DISSLE(Runtime=.NET 8.0, Toolchain=net80)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 9.411 ns, StdErr = 0.027 ns (0.28%), N = 15, StdDev = 0.104 ns\nMin = 9.150 ns, Q1 = 9.363 ns, Median = 9.408 ns, Q3 = 9.469 ns, Max = 9.580 ns\nIQR = 0.106 ns, LowerFence = 9.203 ns, UpperFence = 9.628 ns\nConfidenceInterval = [9.301 ns; 9.522 ns] (CI 99.9%), Margin = 0.111 ns (1.18% of Mean)\nSkewness = -0.63, Kurtosis = 3.53, MValue = 2\n-------------------- Histogram --------------------\n[9.095 ns ; 9.279 ns) | @\n[9.279 ns ; 9.635 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnySmall: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 8.917 ns, StdErr = 0.014 ns (0.15%), N = 14, StdDev = 0.052 ns\nMin = 8.766 ns, Q1 = 8.901 ns, Median = 8.928 ns, Q3 = 8.950 ns, Max = 8.975 ns\nIQR = 0.049 ns, LowerFence = 8.827 ns, UpperFence = 9.024 ns\nConfidenceInterval = [8.859 ns; 8.976 ns] (CI 99.9%), Margin = 0.058 ns (0.65% of Mean)\nSkewness = -1.62, Kurtosis = 5.48, MValue = 2\n-------------------- Histogram --------------------\n[8.737 ns ; 9.003 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyMedium: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 8.902 ns, StdErr = 0.009 ns (0.10%), N = 15, StdDev = 0.034 ns\nMin = 8.847 ns, Q1 = 8.884 ns, Median = 8.900 ns, Q3 = 8.924 ns, Max = 8.971 ns\nIQR = 0.040 ns, LowerFence = 8.823 ns, UpperFence = 8.985 ns\nConfidenceInterval = [8.866 ns; 8.938 ns] (CI 99.9%), Margin = 0.036 ns (0.40% of Mean)\nSkewness = 0.06, Kurtosis = 2.19, MValue = 2\n-------------------- Histogram --------------------\n[8.830 ns ; 8.989 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBig: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 8.706 ns, StdErr = 0.011 ns (0.13%), N = 15, StdDev = 0.043 ns\nMin = 8.640 ns, Q1 = 8.680 ns, Median = 8.696 ns, Q3 = 8.735 ns, Max = 8.791 ns\nIQR = 0.055 ns, LowerFence = 8.598 ns, UpperFence = 8.817 ns\nConfidenceInterval = [8.661 ns; 8.752 ns] (CI 99.9%), Margin = 0.046 ns (0.52% of Mean)\nSkewness = 0.29, Kurtosis = 1.99, MValue = 2\n-------------------- Histogram --------------------\n[8.617 ns ; 8.814 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBigList: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 10.897 ns, StdErr = 0.024 ns (0.22%), N = 15, StdDev = 0.093 ns\nMin = 10.658 ns, Q1 = 10.881 ns, Median = 10.916 ns, Q3 = 10.950 ns, Max = 11.004 ns\nIQR = 0.069 ns, LowerFence = 10.777 ns, UpperFence = 11.054 ns\nConfidenceInterval = [10.798 ns; 10.996 ns] (CI 99.9%), Margin = 0.099 ns (0.91% of Mean)\nSkewness = -1.16, Kurtosis = 3.67, MValue = 2\n-------------------- Histogram --------------------\n[10.609 ns ; 11.053 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBigHashet: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 11.554 ns, StdErr = 0.022 ns (0.19%), N = 15, StdDev = 0.085 ns\nMin = 11.387 ns, Q1 = 11.520 ns, Median = 11.541 ns, Q3 = 11.607 ns, Max = 11.704 ns\nIQR = 0.087 ns, LowerFence = 11.390 ns, UpperFence = 11.737 ns\nConfidenceInterval = [11.462 ns; 11.645 ns] (CI 99.9%), Margin = 0.091 ns (0.79% of Mean)\nSkewness = -0.04, Kurtosis = 2.27, MValue = 2\n-------------------- Histogram --------------------\n[11.341 ns ; 11.750 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBigEnum: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 9.628 ns, StdErr = 0.007 ns (0.07%), N = 14, StdDev = 0.026 ns\nMin = 9.563 ns, Q1 = 9.616 ns, Median = 9.633 ns, Q3 = 9.648 ns, Max = 9.663 ns\nIQR = 0.032 ns, LowerFence = 9.569 ns, UpperFence = 9.696 ns\nConfidenceInterval = [9.599 ns; 9.658 ns] (CI 99.9%), Margin = 0.029 ns (0.31% of Mean)\nSkewness = -0.93, Kurtosis = 3.3, MValue = 2\n-------------------- Histogram --------------------\n[9.549 ns ; 9.677 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.LenghtSmall: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 0.087 ns, StdErr = 0.003 ns (3.07%), N = 15, StdDev = 0.010 ns\nMin = 0.067 ns, Q1 = 0.084 ns, Median = 0.088 ns, Q3 = 0.093 ns, Max = 0.105 ns\nIQR = 0.009 ns, LowerFence = 0.070 ns, UpperFence = 0.106 ns\nConfidenceInterval = [0.076 ns; 0.098 ns] (CI 99.9%), Margin = 0.011 ns (12.70% of Mean)\nSkewness = -0.27, Kurtosis = 2.23, MValue = 2.5\n-------------------- Histogram --------------------\n[0.065 ns ; 0.075 ns) | @@@\n[0.075 ns ; 0.081 ns) |\n[0.081 ns ; 0.092 ns) | @@@@@@@@\n[0.092 ns ; 0.105 ns) | @@@@\n---------------------------------------------------\n\nAnyBenchmark.LenghtMedium: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 0.080 ns, StdErr = 0.003 ns (3.91%), N = 15, StdDev = 0.012 ns\nMin = 0.056 ns, Q1 = 0.071 ns, Median = 0.081 ns, Q3 = 0.088 ns, Max = 0.101 ns\nIQR = 0.017 ns, LowerFence = 0.045 ns, UpperFence = 0.115 ns\nConfidenceInterval = [0.067 ns; 0.093 ns] (CI 99.9%), Margin = 0.013 ns (16.20% of Mean)\nSkewness = -0.31, Kurtosis = 2.07, MValue = 3\n-------------------- Histogram --------------------\n[0.050 ns ; 0.060 ns) | @\n[0.060 ns ; 0.073 ns) | @@@@\n[0.073 ns ; 0.078 ns) |\n[0.078 ns ; 0.091 ns) | @@@@@@@@\n[0.091 ns ; 0.104 ns) | @@\n---------------------------------------------------\n\nAnyBenchmark.LenghtBig: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 0.089 ns, StdErr = 0.003 ns (3.64%), N = 15, StdDev = 0.012 ns\nMin = 0.068 ns, Q1 = 0.081 ns, Median = 0.091 ns, Q3 = 0.095 ns, Max = 0.112 ns\nIQR = 0.013 ns, LowerFence = 0.061 ns, UpperFence = 0.115 ns\nConfidenceInterval = [0.075 ns; 0.102 ns] (CI 99.9%), Margin = 0.013 ns (15.06% of Mean)\nSkewness = 0.09, Kurtosis = 2, MValue = 2\n-------------------- Histogram --------------------\n[0.067 ns ; 0.084 ns) | @@@@\n[0.084 ns ; 0.097 ns) | @@@@@@@@\n[0.097 ns ; 0.114 ns) | @@@\n---------------------------------------------------\n\nAnyBenchmark.LenghtBigList: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 0.091 ns, StdErr = 0.002 ns (2.54%), N = 15, StdDev = 0.009 ns\nMin = 0.074 ns, Q1 = 0.085 ns, Median = 0.092 ns, Q3 = 0.098 ns, Max = 0.109 ns\nIQR = 0.013 ns, LowerFence = 0.065 ns, UpperFence = 0.117 ns\nConfidenceInterval = [0.082 ns; 0.101 ns] (CI 99.9%), Margin = 0.010 ns (10.51% of Mean)\nSkewness = 0.03, Kurtosis = 2.28, MValue = 2.25\n-------------------- Histogram --------------------\n[0.069 ns ; 0.079 ns) | @\n[0.079 ns ; 0.088 ns) | @@@@@\n[0.088 ns ; 0.100 ns) | @@@@@@@@\n[0.100 ns ; 0.105 ns) |\n[0.105 ns ; 0.114 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.LenghtBigHashet: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 0.085 ns, StdErr = 0.003 ns (3.88%), N = 15, StdDev = 0.013 ns\nMin = 0.058 ns, Q1 = 0.079 ns, Median = 0.088 ns, Q3 = 0.092 ns, Max = 0.107 ns\nIQR = 0.013 ns, LowerFence = 0.059 ns, UpperFence = 0.112 ns\nConfidenceInterval = [0.072 ns; 0.099 ns] (CI 99.9%), Margin = 0.014 ns (16.06% of Mean)\nSkewness = -0.43, Kurtosis = 2.45, MValue = 2.75\n-------------------- Histogram --------------------\n[0.052 ns ; 0.064 ns) | @\n[0.064 ns ; 0.080 ns) | @@@\n[0.080 ns ; 0.094 ns) | @@@@@@@@\n[0.094 ns ; 0.108 ns) | @@@\n---------------------------------------------------\n\nAnyBenchmark.LenghtBigEnum: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 1.953 ms, StdErr = 0.005 ms (0.26%), N = 15, StdDev = 0.019 ms\nMin = 1.929 ms, Q1 = 1.935 ms, Median = 1.957 ms, Q3 = 1.966 ms, Max = 1.986 ms\nIQR = 0.031 ms, LowerFence = 1.888 ms, UpperFence = 2.013 ms\nConfidenceInterval = [1.932 ms; 1.974 ms] (CI 99.9%), Margin = 0.021 ms (1.07% of Mean)\nSkewness = 0.19, Kurtosis = 1.61, MValue = 2\n-------------------- Histogram --------------------\n[1.919 ms ; 1.996 ms) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountSmall: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 37.599 ns, StdErr = 0.048 ns (0.13%), N = 15, StdDev = 0.188 ns\nMin = 37.364 ns, Q1 = 37.455 ns, Median = 37.597 ns, Q3 = 37.703 ns, Max = 38.013 ns\nIQR = 0.248 ns, LowerFence = 37.083 ns, UpperFence = 38.076 ns\nConfidenceInterval = [37.398 ns; 37.800 ns] (CI 99.9%), Margin = 0.201 ns (0.53% of Mean)\nSkewness = 0.64, Kurtosis = 2.32, MValue = 2\n-------------------- Histogram --------------------\n[37.264 ns ; 38.113 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountMedium: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 37.473 ns, StdErr = 0.037 ns (0.10%), N = 14, StdDev = 0.139 ns\nMin = 37.147 ns, Q1 = 37.395 ns, Median = 37.485 ns, Q3 = 37.565 ns, Max = 37.710 ns\nIQR = 0.169 ns, LowerFence = 37.142 ns, UpperFence = 37.818 ns\nConfidenceInterval = [37.317 ns; 37.630 ns] (CI 99.9%), Margin = 0.156 ns (0.42% of Mean)\nSkewness = -0.59, Kurtosis = 3.05, MValue = 2\n-------------------- Histogram --------------------\n[37.071 ns ; 37.785 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBig: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 36.960 ns, StdErr = 0.023 ns (0.06%), N = 14, StdDev = 0.088 ns\nMin = 36.809 ns, Q1 = 36.888 ns, Median = 36.966 ns, Q3 = 37.028 ns, Max = 37.103 ns\nIQR = 0.140 ns, LowerFence = 36.678 ns, UpperFence = 37.238 ns\nConfidenceInterval = [36.861 ns; 37.059 ns] (CI 99.9%), Margin = 0.099 ns (0.27% of Mean)\nSkewness = -0.2, Kurtosis = 1.72, MValue = 2\n-------------------- Histogram --------------------\n[36.761 ns ; 37.151 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBigList: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 40.620 ns, StdErr = 0.029 ns (0.07%), N = 14, StdDev = 0.108 ns\nMin = 40.436 ns, Q1 = 40.552 ns, Median = 40.635 ns, Q3 = 40.690 ns, Max = 40.804 ns\nIQR = 0.138 ns, LowerFence = 40.346 ns, UpperFence = 40.896 ns\nConfidenceInterval = [40.498 ns; 40.742 ns] (CI 99.9%), Margin = 0.122 ns (0.30% of Mean)\nSkewness = -0.18, Kurtosis = 1.9, MValue = 2\n-------------------- Histogram --------------------\n[40.377 ns ; 40.863 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBigHashet: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 40.813 ns, StdErr = 0.056 ns (0.14%), N = 15, StdDev = 0.216 ns\nMin = 40.382 ns, Q1 = 40.651 ns, Median = 40.875 ns, Q3 = 40.977 ns, Max = 41.086 ns\nIQR = 0.326 ns, LowerFence = 40.162 ns, UpperFence = 41.467 ns\nConfidenceInterval = [40.582 ns; 41.043 ns] (CI 99.9%), Margin = 0.231 ns (0.57% of Mean)\nSkewness = -0.49, Kurtosis = 1.85, MValue = 2\n-------------------- Histogram --------------------\n[40.267 ns ; 41.201 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBigEnum: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 38.122 ns, StdErr = 0.051 ns (0.13%), N = 14, StdDev = 0.192 ns\nMin = 37.811 ns, Q1 = 37.994 ns, Median = 38.121 ns, Q3 = 38.230 ns, Max = 38.425 ns\nIQR = 0.236 ns, LowerFence = 37.641 ns, UpperFence = 38.584 ns\nConfidenceInterval = [37.906 ns; 38.338 ns] (CI 99.9%), Margin = 0.216 ns (0.57% of Mean)\nSkewness = 0.08, Kurtosis = 1.92, MValue = 2\n-------------------- Histogram --------------------\n[37.706 ns ; 38.452 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckSmall: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 8.767 ns, StdErr = 0.023 ns (0.26%), N = 12, StdDev = 0.078 ns\nMin = 8.674 ns, Q1 = 8.728 ns, Median = 8.759 ns, Q3 = 8.764 ns, Max = 8.987 ns\nIQR = 0.036 ns, LowerFence = 8.673 ns, UpperFence = 8.818 ns\nConfidenceInterval = [8.667 ns; 8.867 ns] (CI 99.9%), Margin = 0.100 ns (1.14% of Mean)\nSkewness = 1.68, Kurtosis = 5.4, MValue = 2\n-------------------- Histogram --------------------\n[8.652 ns ; 9.032 ns) | @@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckMedium: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 8.758 ns, StdErr = 0.007 ns (0.08%), N = 14, StdDev = 0.027 ns\nMin = 8.704 ns, Q1 = 8.741 ns, Median = 8.767 ns, Q3 = 8.774 ns, Max = 8.802 ns\nIQR = 0.033 ns, LowerFence = 8.691 ns, UpperFence = 8.823 ns\nConfidenceInterval = [8.727 ns; 8.789 ns] (CI 99.9%), Margin = 0.031 ns (0.35% of Mean)\nSkewness = -0.46, Kurtosis = 2.05, MValue = 2\n-------------------- Histogram --------------------\n[8.689 ns ; 8.817 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBig: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 8.515 ns, StdErr = 0.009 ns (0.11%), N = 15, StdDev = 0.036 ns\nMin = 8.463 ns, Q1 = 8.496 ns, Median = 8.512 ns, Q3 = 8.537 ns, Max = 8.584 ns\nIQR = 0.040 ns, LowerFence = 8.436 ns, UpperFence = 8.597 ns\nConfidenceInterval = [8.476 ns; 8.553 ns] (CI 99.9%), Margin = 0.038 ns (0.45% of Mean)\nSkewness = 0.35, Kurtosis = 2.14, MValue = 2\n-------------------- Histogram --------------------\n[8.444 ns ; 8.604 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBigList: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 10.802 ns, StdErr = 0.016 ns (0.15%), N = 13, StdDev = 0.057 ns\nMin = 10.720 ns, Q1 = 10.763 ns, Median = 10.792 ns, Q3 = 10.838 ns, Max = 10.918 ns\nIQR = 0.075 ns, LowerFence = 10.651 ns, UpperFence = 10.951 ns\nConfidenceInterval = [10.733 ns; 10.870 ns] (CI 99.9%), Margin = 0.068 ns (0.63% of Mean)\nSkewness = 0.47, Kurtosis = 2.12, MValue = 2\n-------------------- Histogram --------------------\n[10.688 ns ; 10.950 ns) | @@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBigHashset: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 10.877 ns, StdErr = 0.049 ns (0.45%), N = 30, StdDev = 0.271 ns\nMin = 10.618 ns, Q1 = 10.745 ns, Median = 10.779 ns, Q3 = 10.865 ns, Max = 11.792 ns\nIQR = 0.120 ns, LowerFence = 10.564 ns, UpperFence = 11.046 ns\nConfidenceInterval = [10.696 ns; 11.057 ns] (CI 99.9%), Margin = 0.181 ns (1.66% of Mean)\nSkewness = 2.28, Kurtosis = 7.57, MValue = 2\n-------------------- Histogram --------------------\n[10.503 ns ; 10.890 ns) | @@@@@@@@@@@@@@@@@@@@@@@\n[10.890 ns ; 11.370 ns) | @@@@@\n[11.370 ns ; 11.633 ns) |\n[11.633 ns ; 11.907 ns) | @@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBigEnumerable: Job-HXWWDC(Runtime=.NET Framework 4.8, Toolchain=net48)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 8.998 ns, StdErr = 0.011 ns (0.13%), N = 15, StdDev = 0.044 ns\nMin = 8.930 ns, Q1 = 8.965 ns, Median = 8.999 ns, Q3 = 9.028 ns, Max = 9.092 ns\nIQR = 0.063 ns, LowerFence = 8.872 ns, UpperFence = 9.122 ns\nConfidenceInterval = [8.951 ns; 9.046 ns] (CI 99.9%), Margin = 0.047 ns (0.52% of Mean)\nSkewness = 0.4, Kurtosis = 2.18, MValue = 2\n-------------------- Histogram --------------------\n[8.907 ns ; 9.115 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnySmall: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.240 ns, StdErr = 0.007 ns (0.14%), N = 14, StdDev = 0.028 ns\nMin = 5.193 ns, Q1 = 5.216 ns, Median = 5.244 ns, Q3 = 5.264 ns, Max = 5.278 ns\nIQR = 0.047 ns, LowerFence = 5.145 ns, UpperFence = 5.334 ns\nConfidenceInterval = [5.208 ns; 5.271 ns] (CI 99.9%), Margin = 0.032 ns (0.60% of Mean)\nSkewness = -0.23, Kurtosis = 1.52, MValue = 2\n-------------------- Histogram --------------------\n[5.178 ns ; 5.293 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyMedium: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.940 ns, StdErr = 0.009 ns (0.15%), N = 15, StdDev = 0.035 ns\nMin = 5.886 ns, Q1 = 5.922 ns, Median = 5.940 ns, Q3 = 5.969 ns, Max = 5.991 ns\nIQR = 0.048 ns, LowerFence = 5.850 ns, UpperFence = 6.041 ns\nConfidenceInterval = [5.903 ns; 5.978 ns] (CI 99.9%), Margin = 0.038 ns (0.63% of Mean)\nSkewness = -0.06, Kurtosis = 1.6, MValue = 2\n-------------------- Histogram --------------------\n[5.879 ns ; 5.998 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBig: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.883 ns, StdErr = 0.007 ns (0.12%), N = 14, StdDev = 0.027 ns\nMin = 5.825 ns, Q1 = 5.879 ns, Median = 5.884 ns, Q3 = 5.896 ns, Max = 5.930 ns\nIQR = 0.017 ns, LowerFence = 5.854 ns, UpperFence = 5.922 ns\nConfidenceInterval = [5.853 ns; 5.913 ns] (CI 99.9%), Margin = 0.030 ns (0.51% of Mean)\nSkewness = -0.38, Kurtosis = 2.71, MValue = 2\n-------------------- Histogram --------------------\n[5.810 ns ; 5.944 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBigList: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 3.452 ns, StdErr = 0.005 ns (0.16%), N = 13, StdDev = 0.019 ns\nMin = 3.427 ns, Q1 = 3.439 ns, Median = 3.446 ns, Q3 = 3.459 ns, Max = 3.501 ns\nIQR = 0.020 ns, LowerFence = 3.408 ns, UpperFence = 3.490 ns\nConfidenceInterval = [3.428 ns; 3.475 ns] (CI 99.9%), Margin = 0.023 ns (0.67% of Mean)\nSkewness = 1.01, Kurtosis = 3.44, MValue = 2\n-------------------- Histogram --------------------\n[3.417 ns ; 3.512 ns) | @@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBigHashet: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 3.446 ns, StdErr = 0.004 ns (0.12%), N = 15, StdDev = 0.016 ns\nMin = 3.421 ns, Q1 = 3.433 ns, Median = 3.448 ns, Q3 = 3.455 ns, Max = 3.485 ns\nIQR = 0.022 ns, LowerFence = 3.399 ns, UpperFence = 3.488 ns\nConfidenceInterval = [3.429 ns; 3.464 ns] (CI 99.9%), Margin = 0.017 ns (0.50% of Mean)\nSkewness = 0.57, Kurtosis = 2.73, MValue = 2\n-------------------- Histogram --------------------\n[3.415 ns ; 3.493 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBigEnum: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 12.968 ns, StdErr = 0.016 ns (0.12%), N = 13, StdDev = 0.058 ns\nMin = 12.875 ns, Q1 = 12.923 ns, Median = 12.971 ns, Q3 = 12.996 ns, Max = 13.076 ns\nIQR = 0.074 ns, LowerFence = 12.812 ns, UpperFence = 13.107 ns\nConfidenceInterval = [12.898 ns; 13.038 ns] (CI 99.9%), Margin = 0.070 ns (0.54% of Mean)\nSkewness = 0.11, Kurtosis = 1.96, MValue = 2\n-------------------- Histogram --------------------\n[12.855 ns ; 13.109 ns) | @@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.LenghtSmall: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.003 ns, StdErr = 0.001 ns (37.42%), N = 15, StdDev = 0.004 ns\nMin = 0.000 ns, Q1 = 0.000 ns, Median = 0.001 ns, Q3 = 0.004 ns, Max = 0.014 ns\nIQR = 0.004 ns, LowerFence = -0.006 ns, UpperFence = 0.011 ns\nConfidenceInterval = [-0.002 ns; 0.007 ns] (CI 99.9%), Margin = 0.004 ns (154.92% of Mean)\nSkewness = 1.43, Kurtosis = 4.17, MValue = 2.4\n-------------------- Histogram --------------------\n[-0.001 ns ; 0.004 ns) | @@@@@@@@@@@\n[ 0.004 ns ; 0.009 ns) | @@@\n[ 0.009 ns ; 0.011 ns) |\n[ 0.011 ns ; 0.016 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.LenghtMedium: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.004 ns, StdErr = 0.001 ns (25.29%), N = 14, StdDev = 0.003 ns\nMin = 0.000 ns, Q1 = 0.001 ns, Median = 0.002 ns, Q3 = 0.006 ns, Max = 0.010 ns\nIQR = 0.004 ns, LowerFence = -0.005 ns, UpperFence = 0.012 ns\nConfidenceInterval = [-0.000 ns; 0.007 ns] (CI 99.9%), Margin = 0.004 ns (106.73% of Mean)\nSkewness = 0.69, Kurtosis = 2.06, MValue = 2.44\n-------------------- Histogram --------------------\n[-0.000 ns ; 0.003 ns) | @@@@@@@@@\n[ 0.003 ns ; 0.005 ns) | @\n[ 0.005 ns ; 0.009 ns) | @@@\n[ 0.009 ns ; 0.012 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.LenghtBig: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.005 ns, StdErr = 0.001 ns (24.10%), N = 15, StdDev = 0.005 ns\nMin = 0.000 ns, Q1 = 0.001 ns, Median = 0.004 ns, Q3 = 0.009 ns, Max = 0.016 ns\nIQR = 0.008 ns, LowerFence = -0.011 ns, UpperFence = 0.021 ns\nConfidenceInterval = [0.000 ns; 0.011 ns] (CI 99.9%), Margin = 0.005 ns (99.77% of Mean)\nSkewness = 0.56, Kurtosis = 2.03, MValue = 2\n-------------------- Histogram --------------------\n[-0.001 ns ; 0.005 ns) | @@@@@@@@@\n[ 0.005 ns ; 0.012 ns) | @@@@\n[ 0.012 ns ; 0.017 ns) | @@\n---------------------------------------------------\n\nAnyBenchmark.LenghtBigList: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.003 ns, StdErr = 0.001 ns (37.15%), N = 14, StdDev = 0.004 ns\nMin = 0.000 ns, Q1 = 0.000 ns, Median = 0.001 ns, Q3 = 0.004 ns, Max = 0.012 ns\nIQR = 0.004 ns, LowerFence = -0.006 ns, UpperFence = 0.009 ns\nConfidenceInterval = [-0.001 ns; 0.007 ns] (CI 99.9%), Margin = 0.004 ns (156.81% of Mean)\nSkewness = 1.26, Kurtosis = 3.45, MValue = 2.22\n-------------------- Histogram --------------------\n[-0.000 ns ; 0.004 ns) | @@@@@@@@@@@\n[ 0.004 ns ; 0.008 ns) | @\n[ 0.008 ns ; 0.012 ns) | @@\n---------------------------------------------------\n\nAnyBenchmark.LenghtBigHashet: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.002 ns, StdErr = 0.001 ns (39.08%), N = 15, StdDev = 0.003 ns\nMin = 0.000 ns, Q1 = 0.000 ns, Median = 0.000 ns, Q3 = 0.003 ns, Max = 0.009 ns\nIQR = 0.003 ns, LowerFence = -0.005 ns, UpperFence = 0.008 ns\nConfidenceInterval = [-0.001 ns; 0.005 ns] (CI 99.9%), Margin = 0.003 ns (161.83% of Mean)\nSkewness = 1.31, Kurtosis = 3.64, MValue = 2.4\n-------------------- Histogram --------------------\n[-0.000 ns ; 0.003 ns) | @@@@@@@@@@@\n[ 0.003 ns ; 0.006 ns) | @@@\n[ 0.006 ns ; 0.008 ns) |\n[ 0.008 ns ; 0.011 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.LenghtBigEnum: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 1.877 ms, StdErr = 0.003 ms (0.15%), N = 14, StdDev = 0.011 ms\nMin = 1.856 ms, Q1 = 1.871 ms, Median = 1.877 ms, Q3 = 1.883 ms, Max = 1.896 ms\nIQR = 0.012 ms, LowerFence = 1.852 ms, UpperFence = 1.901 ms\nConfidenceInterval = [1.865 ms; 1.889 ms] (CI 99.9%), Margin = 0.012 ms (0.64% of Mean)\nSkewness = -0.18, Kurtosis = 2.28, MValue = 2\n-------------------- Histogram --------------------\n[1.850 ms ; 1.899 ms) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountSmall: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 24.100 ns, StdErr = 0.129 ns (0.54%), N = 22, StdDev = 0.606 ns\nMin = 23.502 ns, Q1 = 23.665 ns, Median = 23.848 ns, Q3 = 24.527 ns, Max = 25.360 ns\nIQR = 0.862 ns, LowerFence = 22.372 ns, UpperFence = 25.820 ns\nConfidenceInterval = [23.607 ns; 24.594 ns] (CI 99.9%), Margin = 0.493 ns (2.05% of Mean)\nSkewness = 0.86, Kurtosis = 2.14, MValue = 2.13\n-------------------- Histogram --------------------\n[23.474 ns ; 24.246 ns) | @@@@@@@@@@@@@@@\n[24.246 ns ; 24.914 ns) | @@@\n[24.914 ns ; 25.481 ns) | @@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountMedium: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 23.075 ns, StdErr = 0.029 ns (0.13%), N = 13, StdDev = 0.104 ns\nMin = 22.900 ns, Q1 = 23.009 ns, Median = 23.091 ns, Q3 = 23.145 ns, Max = 23.226 ns\nIQR = 0.137 ns, LowerFence = 22.804 ns, UpperFence = 23.350 ns\nConfidenceInterval = [22.950 ns; 23.200 ns] (CI 99.9%), Margin = 0.125 ns (0.54% of Mean)\nSkewness = -0.12, Kurtosis = 1.61, MValue = 2\n-------------------- Histogram --------------------\n[22.842 ns ; 23.285 ns) | @@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBig: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 22.930 ns, StdErr = 0.036 ns (0.16%), N = 15, StdDev = 0.138 ns\nMin = 22.699 ns, Q1 = 22.828 ns, Median = 22.929 ns, Q3 = 23.022 ns, Max = 23.181 ns\nIQR = 0.194 ns, LowerFence = 22.538 ns, UpperFence = 23.313 ns\nConfidenceInterval = [22.782 ns; 23.078 ns] (CI 99.9%), Margin = 0.148 ns (0.64% of Mean)\nSkewness = 0.07, Kurtosis = 1.72, MValue = 2\n-------------------- Histogram --------------------\n[22.626 ns ; 23.254 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBigList: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 18.040 ns, StdErr = 0.019 ns (0.11%), N = 14, StdDev = 0.071 ns\nMin = 17.968 ns, Q1 = 17.985 ns, Median = 18.016 ns, Q3 = 18.069 ns, Max = 18.193 ns\nIQR = 0.083 ns, LowerFence = 17.861 ns, UpperFence = 18.193 ns\nConfidenceInterval = [17.960 ns; 18.121 ns] (CI 99.9%), Margin = 0.081 ns (0.45% of Mean)\nSkewness = 0.88, Kurtosis = 2.37, MValue = 2\n-------------------- Histogram --------------------\n[17.929 ns ; 18.232 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBigHashet: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 27.360 ns, StdErr = 0.022 ns (0.08%), N = 13, StdDev = 0.078 ns\nMin = 27.211 ns, Q1 = 27.351 ns, Median = 27.378 ns, Q3 = 27.389 ns, Max = 27.461 ns\nIQR = 0.038 ns, LowerFence = 27.294 ns, UpperFence = 27.446 ns\nConfidenceInterval = [27.267 ns; 27.453 ns] (CI 99.9%), Margin = 0.093 ns (0.34% of Mean)\nSkewness = -0.78, Kurtosis = 2.45, MValue = 2\n-------------------- Histogram --------------------\n[27.167 ns ; 27.504 ns) | @@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBigEnum: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 23.211 ns, StdErr = 0.028 ns (0.12%), N = 15, StdDev = 0.109 ns\nMin = 23.076 ns, Q1 = 23.128 ns, Median = 23.205 ns, Q3 = 23.251 ns, Max = 23.403 ns\nIQR = 0.124 ns, LowerFence = 22.942 ns, UpperFence = 23.437 ns\nConfidenceInterval = [23.094 ns; 23.328 ns] (CI 99.9%), Margin = 0.117 ns (0.50% of Mean)\nSkewness = 0.51, Kurtosis = 1.85, MValue = 2\n-------------------- Histogram --------------------\n[23.018 ns ; 23.461 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckSmall: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 6.956 ns, StdErr = 0.011 ns (0.15%), N = 14, StdDev = 0.039 ns\nMin = 6.863 ns, Q1 = 6.933 ns, Median = 6.950 ns, Q3 = 6.979 ns, Max = 7.016 ns\nIQR = 0.045 ns, LowerFence = 6.865 ns, UpperFence = 7.047 ns\nConfidenceInterval = [6.912 ns; 7.001 ns] (CI 99.9%), Margin = 0.044 ns (0.64% of Mean)\nSkewness = -0.48, Kurtosis = 2.97, MValue = 2\n-------------------- Histogram --------------------\n[6.841 ns ; 7.022 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckMedium: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 6.992 ns, StdErr = 0.014 ns (0.20%), N = 15, StdDev = 0.053 ns\nMin = 6.933 ns, Q1 = 6.954 ns, Median = 6.975 ns, Q3 = 7.035 ns, Max = 7.099 ns\nIQR = 0.081 ns, LowerFence = 6.832 ns, UpperFence = 7.157 ns\nConfidenceInterval = [6.935 ns; 7.049 ns] (CI 99.9%), Margin = 0.057 ns (0.81% of Mean)\nSkewness = 0.65, Kurtosis = 1.97, MValue = 2\n-------------------- Histogram --------------------\n[6.905 ns ; 7.128 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBig: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 6.966 ns, StdErr = 0.012 ns (0.17%), N = 15, StdDev = 0.046 ns\nMin = 6.889 ns, Q1 = 6.929 ns, Median = 6.962 ns, Q3 = 6.997 ns, Max = 7.037 ns\nIQR = 0.068 ns, LowerFence = 6.828 ns, UpperFence = 7.098 ns\nConfidenceInterval = [6.916 ns; 7.015 ns] (CI 99.9%), Margin = 0.049 ns (0.71% of Mean)\nSkewness = 0.1, Kurtosis = 1.71, MValue = 2\n-------------------- Histogram --------------------\n[6.875 ns ; 7.062 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBigList: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 4.141 ns, StdErr = 0.005 ns (0.12%), N = 14, StdDev = 0.018 ns\nMin = 4.117 ns, Q1 = 4.127 ns, Median = 4.139 ns, Q3 = 4.153 ns, Max = 4.174 ns\nIQR = 0.026 ns, LowerFence = 4.087 ns, UpperFence = 4.193 ns\nConfidenceInterval = [4.121 ns; 4.161 ns] (CI 99.9%), Margin = 0.020 ns (0.49% of Mean)\nSkewness = 0.31, Kurtosis = 1.7, MValue = 2\n-------------------- Histogram --------------------\n[4.107 ns ; 4.184 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBigHashset: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 4.273 ns, StdErr = 0.018 ns (0.42%), N = 15, StdDev = 0.070 ns\nMin = 4.207 ns, Q1 = 4.221 ns, Median = 4.238 ns, Q3 = 4.318 ns, Max = 4.404 ns\nIQR = 0.097 ns, LowerFence = 4.076 ns, UpperFence = 4.463 ns\nConfidenceInterval = [4.198 ns; 4.347 ns] (CI 99.9%), Margin = 0.075 ns (1.74% of Mean)\nSkewness = 0.79, Kurtosis = 2.01, MValue = 2\n-------------------- Histogram --------------------\n[4.200 ns ; 4.442 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBigEnumerable: .NET 6.0(Runtime=.NET 6.0)\nRuntime = .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 14.245 ns, StdErr = 0.024 ns (0.17%), N = 13, StdDev = 0.086 ns\nMin = 14.139 ns, Q1 = 14.177 ns, Median = 14.224 ns, Q3 = 14.299 ns, Max = 14.446 ns\nIQR = 0.121 ns, LowerFence = 13.996 ns, UpperFence = 14.481 ns\nConfidenceInterval = [14.142 ns; 14.348 ns] (CI 99.9%), Margin = 0.103 ns (0.72% of Mean)\nSkewness = 0.76, Kurtosis = 2.82, MValue = 2\n-------------------- Histogram --------------------\n[14.091 ns ; 14.495 ns) | @@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnySmall: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.193 ns, StdErr = 0.023 ns (0.44%), N = 14, StdDev = 0.085 ns\nMin = 5.100 ns, Q1 = 5.142 ns, Median = 5.169 ns, Q3 = 5.214 ns, Max = 5.400 ns\nIQR = 0.072 ns, LowerFence = 5.035 ns, UpperFence = 5.321 ns\nConfidenceInterval = [5.097 ns; 5.288 ns] (CI 99.9%), Margin = 0.096 ns (1.85% of Mean)\nSkewness = 1.06, Kurtosis = 3.07, MValue = 2\n-------------------- Histogram --------------------\n[5.090 ns ; 5.211 ns) | @@@@@@@@@@\n[5.211 ns ; 5.446 ns) | @@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyMedium: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.122 ns, StdErr = 0.006 ns (0.12%), N = 14, StdDev = 0.023 ns\nMin = 5.072 ns, Q1 = 5.108 ns, Median = 5.121 ns, Q3 = 5.137 ns, Max = 5.170 ns\nIQR = 0.029 ns, LowerFence = 5.064 ns, UpperFence = 5.181 ns\nConfidenceInterval = [5.095 ns; 5.148 ns] (CI 99.9%), Margin = 0.026 ns (0.52% of Mean)\nSkewness = -0.01, Kurtosis = 2.9, MValue = 2\n-------------------- Histogram --------------------\n[5.064 ns ; 5.183 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBig: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.122 ns, StdErr = 0.008 ns (0.16%), N = 15, StdDev = 0.032 ns\nMin = 5.076 ns, Q1 = 5.099 ns, Median = 5.115 ns, Q3 = 5.137 ns, Max = 5.182 ns\nIQR = 0.037 ns, LowerFence = 5.043 ns, UpperFence = 5.193 ns\nConfidenceInterval = [5.088 ns; 5.156 ns] (CI 99.9%), Margin = 0.034 ns (0.67% of Mean)\nSkewness = 0.53, Kurtosis = 2, MValue = 2\n-------------------- Histogram --------------------\n[5.064 ns ; 5.199 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBigList: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 2.088 ns, StdErr = 0.002 ns (0.12%), N = 15, StdDev = 0.010 ns\nMin = 2.072 ns, Q1 = 2.082 ns, Median = 2.085 ns, Q3 = 2.093 ns, Max = 2.107 ns\nIQR = 0.011 ns, LowerFence = 2.065 ns, UpperFence = 2.110 ns\nConfidenceInterval = [2.078 ns; 2.098 ns] (CI 99.9%), Margin = 0.010 ns (0.50% of Mean)\nSkewness = 0.57, Kurtosis = 2.37, MValue = 2\n-------------------- Histogram --------------------\n[2.067 ns ; 2.112 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBigHashet: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 2.096 ns, StdErr = 0.004 ns (0.19%), N = 15, StdDev = 0.015 ns\nMin = 2.077 ns, Q1 = 2.084 ns, Median = 2.091 ns, Q3 = 2.105 ns, Max = 2.125 ns\nIQR = 0.021 ns, LowerFence = 2.053 ns, UpperFence = 2.137 ns\nConfidenceInterval = [2.079 ns; 2.112 ns] (CI 99.9%), Margin = 0.016 ns (0.78% of Mean)\nSkewness = 0.45, Kurtosis = 1.84, MValue = 2\n-------------------- Histogram --------------------\n[2.069 ns ; 2.133 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBigEnum: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 9.306 ns, StdErr = 0.019 ns (0.20%), N = 14, StdDev = 0.070 ns\nMin = 9.111 ns, Q1 = 9.288 ns, Median = 9.334 ns, Q3 = 9.346 ns, Max = 9.372 ns\nIQR = 0.059 ns, LowerFence = 9.200 ns, UpperFence = 9.434 ns\nConfidenceInterval = [9.227 ns; 9.385 ns] (CI 99.9%), Margin = 0.079 ns (0.85% of Mean)\nSkewness = -1.5, Kurtosis = 4.56, MValue = 2\n-------------------- Histogram --------------------\n[9.072 ns ; 9.411 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.LenghtSmall: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.008 ns, StdErr = 0.001 ns (11.87%), N = 13, StdDev = 0.003 ns\nMin = 0.003 ns, Q1 = 0.006 ns, Median = 0.007 ns, Q3 = 0.009 ns, Max = 0.016 ns\nIQR = 0.003 ns, LowerFence = 0.001 ns, UpperFence = 0.013 ns\nConfidenceInterval = [0.004 ns; 0.012 ns] (CI 99.9%), Margin = 0.004 ns (51.23% of Mean)\nSkewness = 1.02, Kurtosis = 3.58, MValue = 2\n-------------------- Histogram --------------------\n[0.002 ns ; 0.005 ns) | @@\n[0.005 ns ; 0.009 ns) | @@@@@@@@\n[0.009 ns ; 0.013 ns) | @@\n[0.013 ns ; 0.014 ns) |\n[0.014 ns ; 0.018 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.LenghtMedium: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.008 ns, StdErr = 0.001 ns (7.05%), N = 14, StdDev = 0.002 ns\nMin = 0.004 ns, Q1 = 0.007 ns, Median = 0.008 ns, Q3 = 0.010 ns, Max = 0.012 ns\nIQR = 0.003 ns, LowerFence = 0.003 ns, UpperFence = 0.014 ns\nConfidenceInterval = [0.006 ns; 0.011 ns] (CI 99.9%), Margin = 0.002 ns (29.77% of Mean)\nSkewness = -0.31, Kurtosis = 2.45, MValue = 2.57\n-------------------- Histogram --------------------\n[0.003 ns ; 0.006 ns) | @@\n[0.006 ns ; 0.007 ns) |\n[0.007 ns ; 0.009 ns) | @@@@@@@\n[0.009 ns ; 0.011 ns) | @@@@\n[0.011 ns ; 0.013 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.LenghtBig: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.018 ns, StdErr = 0.004 ns (21.17%), N = 15, StdDev = 0.015 ns\nMin = 0.002 ns, Q1 = 0.008 ns, Median = 0.011 ns, Q3 = 0.025 ns, Max = 0.046 ns\nIQR = 0.017 ns, LowerFence = -0.017 ns, UpperFence = 0.050 ns\nConfidenceInterval = [0.002 ns; 0.033 ns] (CI 99.9%), Margin = 0.016 ns (87.66% of Mean)\nSkewness = 0.89, Kurtosis = 2.26, MValue = 2.2\n-------------------- Histogram --------------------\n[0.001 ns ; 0.017 ns) | @@@@@@@@@@\n[0.017 ns ; 0.033 ns) | @@\n[0.033 ns ; 0.049 ns) | @@@\n---------------------------------------------------\n\nAnyBenchmark.LenghtBigList: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.009 ns, StdErr = 0.002 ns (26.13%), N = 15, StdDev = 0.010 ns\nMin = 0.000 ns, Q1 = 0.000 ns, Median = 0.007 ns, Q3 = 0.013 ns, Max = 0.027 ns\nIQR = 0.012 ns, LowerFence = -0.018 ns, UpperFence = 0.031 ns\nConfidenceInterval = [-0.001 ns; 0.020 ns] (CI 99.9%), Margin = 0.010 ns (108.19% of Mean)\nSkewness = 0.67, Kurtosis = 2.03, MValue = 2\n-------------------- Histogram --------------------\n[-0.001 ns ; 0.010 ns) | @@@@@@@@@\n[ 0.010 ns ; 0.020 ns) | @@@\n[ 0.020 ns ; 0.030 ns) | @@@\n---------------------------------------------------\n\nAnyBenchmark.LenghtBigHashet: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 0.004 ns, StdErr = 0.001 ns (26.95%), N = 15, StdDev = 0.004 ns\nMin = 0.000 ns, Q1 = 0.000 ns, Median = 0.003 ns, Q3 = 0.007 ns, Max = 0.016 ns\nIQR = 0.007 ns, LowerFence = -0.010 ns, UpperFence = 0.017 ns\nConfidenceInterval = [-0.000 ns; 0.009 ns] (CI 99.9%), Margin = 0.005 ns (111.58% of Mean)\nSkewness = 0.91, Kurtosis = 3.11, MValue = 2.22\n-------------------- Histogram --------------------\n[-0.001 ns ; 0.004 ns) | @@@@@@@@@\n[ 0.004 ns ; 0.010 ns) | @@@@@\n[ 0.010 ns ; 0.013 ns) |\n[ 0.013 ns ; 0.018 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.LenghtBigEnum: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 583.897 us, StdErr = 1.288 us (0.22%), N = 15, StdDev = 4.987 us\nMin = 575.210 us, Q1 = 580.512 us, Median = 583.399 us, Q3 = 586.560 us, Max = 592.546 us\nIQR = 6.048 us, LowerFence = 571.440 us, UpperFence = 595.632 us\nConfidenceInterval = [578.566 us; 589.229 us] (CI 99.9%), Margin = 5.331 us (0.91% of Mean)\nSkewness = 0.14, Kurtosis = 1.98, MValue = 2\n-------------------- Histogram --------------------\n[572.556 us ; 595.200 us) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountSmall: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 15.363 ns, StdErr = 0.040 ns (0.26%), N = 15, StdDev = 0.156 ns\nMin = 15.132 ns, Q1 = 15.208 ns, Median = 15.406 ns, Q3 = 15.460 ns, Max = 15.643 ns\nIQR = 0.252 ns, LowerFence = 14.831 ns, UpperFence = 15.838 ns\nConfidenceInterval = [15.196 ns; 15.529 ns] (CI 99.9%), Margin = 0.166 ns (1.08% of Mean)\nSkewness = -0.03, Kurtosis = 1.72, MValue = 2\n-------------------- Histogram --------------------\n[15.049 ns ; 15.726 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountMedium: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 15.200 ns, StdErr = 0.035 ns (0.23%), N = 14, StdDev = 0.132 ns\nMin = 14.973 ns, Q1 = 15.107 ns, Median = 15.222 ns, Q3 = 15.295 ns, Max = 15.383 ns\nIQR = 0.188 ns, LowerFence = 14.824 ns, UpperFence = 15.578 ns\nConfidenceInterval = [15.052 ns; 15.349 ns] (CI 99.9%), Margin = 0.148 ns (0.98% of Mean)\nSkewness = -0.3, Kurtosis = 1.67, MValue = 2\n-------------------- Histogram --------------------\n[14.902 ns ; 15.422 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBig: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 15.350 ns, StdErr = 0.045 ns (0.29%), N = 15, StdDev = 0.173 ns\nMin = 15.077 ns, Q1 = 15.223 ns, Median = 15.366 ns, Q3 = 15.422 ns, Max = 15.673 ns\nIQR = 0.199 ns, LowerFence = 14.924 ns, UpperFence = 15.721 ns\nConfidenceInterval = [15.166 ns; 15.535 ns] (CI 99.9%), Margin = 0.184 ns (1.20% of Mean)\nSkewness = 0.36, Kurtosis = 1.98, MValue = 2\n-------------------- Histogram --------------------\n[14.985 ns ; 15.765 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBigList: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 11.565 ns, StdErr = 0.021 ns (0.18%), N = 14, StdDev = 0.078 ns\nMin = 11.332 ns, Q1 = 11.551 ns, Median = 11.572 ns, Q3 = 11.607 ns, Max = 11.657 ns\nIQR = 0.057 ns, LowerFence = 11.465 ns, UpperFence = 11.693 ns\nConfidenceInterval = [11.477 ns; 11.653 ns] (CI 99.9%), Margin = 0.088 ns (0.76% of Mean)\nSkewness = -1.67, Kurtosis = 5.87, MValue = 2\n-------------------- Histogram --------------------\n[11.289 ns ; 11.700 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBigHashet: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 20.108 ns, StdErr = 0.070 ns (0.35%), N = 14, StdDev = 0.262 ns\nMin = 19.611 ns, Q1 = 19.998 ns, Median = 20.065 ns, Q3 = 20.115 ns, Max = 20.581 ns\nIQR = 0.117 ns, LowerFence = 19.823 ns, UpperFence = 20.289 ns\nConfidenceInterval = [19.812 ns; 20.404 ns] (CI 99.9%), Margin = 0.296 ns (1.47% of Mean)\nSkewness = 0.4, Kurtosis = 2.56, MValue = 2\n-------------------- Histogram --------------------\n[19.469 ns ; 20.215 ns) | @@@@@@@@@@@\n[20.215 ns ; 20.724 ns) | @@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBigEnum: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 18.014 ns, StdErr = 0.029 ns (0.16%), N = 14, StdDev = 0.109 ns\nMin = 17.751 ns, Q1 = 17.974 ns, Median = 18.062 ns, Q3 = 18.092 ns, Max = 18.124 ns\nIQR = 0.118 ns, LowerFence = 17.796 ns, UpperFence = 18.269 ns\nConfidenceInterval = [17.891 ns; 18.137 ns] (CI 99.9%), Margin = 0.123 ns (0.68% of Mean)\nSkewness = -1, Kurtosis = 2.93, MValue = 2\n-------------------- Histogram --------------------\n[17.692 ns ; 18.184 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckSmall: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.138 ns, StdErr = 0.003 ns (0.05%), N = 13, StdDev = 0.010 ns\nMin = 5.123 ns, Q1 = 5.132 ns, Median = 5.142 ns, Q3 = 5.144 ns, Max = 5.153 ns\nIQR = 0.013 ns, LowerFence = 5.113 ns, UpperFence = 5.163 ns\nConfidenceInterval = [5.127 ns; 5.150 ns] (CI 99.9%), Margin = 0.012 ns (0.23% of Mean)\nSkewness = -0.16, Kurtosis = 1.56, MValue = 2\n-------------------- Histogram --------------------\n[5.118 ns ; 5.158 ns) | @@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckMedium: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.123 ns, StdErr = 0.008 ns (0.15%), N = 14, StdDev = 0.029 ns\nMin = 5.081 ns, Q1 = 5.106 ns, Median = 5.121 ns, Q3 = 5.139 ns, Max = 5.189 ns\nIQR = 0.033 ns, LowerFence = 5.057 ns, UpperFence = 5.188 ns\nConfidenceInterval = [5.091 ns; 5.156 ns] (CI 99.9%), Margin = 0.032 ns (0.63% of Mean)\nSkewness = 0.48, Kurtosis = 2.78, MValue = 2\n-------------------- Histogram --------------------\n[5.079 ns ; 5.205 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBig: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 5.150 ns, StdErr = 0.005 ns (0.09%), N = 15, StdDev = 0.018 ns\nMin = 5.117 ns, Q1 = 5.135 ns, Median = 5.153 ns, Q3 = 5.162 ns, Max = 5.176 ns\nIQR = 0.027 ns, LowerFence = 5.094 ns, UpperFence = 5.202 ns\nConfidenceInterval = [5.130 ns; 5.169 ns] (CI 99.9%), Margin = 0.019 ns (0.38% of Mean)\nSkewness = -0.15, Kurtosis = 1.68, MValue = 2\n-------------------- Histogram --------------------\n[5.107 ns ; 5.186 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBigList: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 1.740 ns, StdErr = 0.013 ns (0.76%), N = 15, StdDev = 0.051 ns\nMin = 1.675 ns, Q1 = 1.705 ns, Median = 1.743 ns, Q3 = 1.767 ns, Max = 1.880 ns\nIQR = 0.063 ns, LowerFence = 1.611 ns, UpperFence = 1.861 ns\nConfidenceInterval = [1.686 ns; 1.795 ns] (CI 99.9%), Margin = 0.055 ns (3.14% of Mean)\nSkewness = 1.13, Kurtosis = 4.1, MValue = 2\n-------------------- Histogram --------------------\n[1.666 ns ; 1.720 ns) | @@@@@@@\n[1.720 ns ; 1.788 ns) | @@@@@@@\n[1.788 ns ; 1.853 ns) |\n[1.853 ns ; 1.908 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBigHashset: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 1.916 ns, StdErr = 0.011 ns (0.58%), N = 15, StdDev = 0.043 ns\nMin = 1.868 ns, Q1 = 1.888 ns, Median = 1.902 ns, Q3 = 1.945 ns, Max = 2.014 ns\nIQR = 0.057 ns, LowerFence = 1.802 ns, UpperFence = 2.031 ns\nConfidenceInterval = [1.870 ns; 1.962 ns] (CI 99.9%), Margin = 0.046 ns (2.40% of Mean)\nSkewness = 0.81, Kurtosis = 2.44, MValue = 2\n-------------------- Histogram --------------------\n[1.865 ns ; 1.910 ns) | @@@@@@@@@@\n[1.910 ns ; 1.977 ns) | @@@@\n[1.977 ns ; 2.037 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBigEnumerable: .NET 8.0(Runtime=.NET 8.0)\nRuntime = .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2; GC = Concurrent Workstation\nMean = 9.522 ns, StdErr = 0.047 ns (0.49%), N = 12, StdDev = 0.161 ns\nMin = 9.311 ns, Q1 = 9.390 ns, Median = 9.490 ns, Q3 = 9.664 ns, Max = 9.756 ns\nIQR = 0.273 ns, LowerFence = 8.980 ns, UpperFence = 10.074 ns\nConfidenceInterval = [9.315 ns; 9.728 ns] (CI 99.9%), Margin = 0.206 ns (2.17% of Mean)\nSkewness = 0.16, Kurtosis = 1.27, MValue = 2\n-------------------- Histogram --------------------\n[9.218 ns ; 9.520 ns) | @@@@@@@\n[9.520 ns ; 9.787 ns) | @@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnySmall: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 8.829 ns, StdErr = 0.055 ns (0.62%), N = 37, StdDev = 0.335 ns\nMin = 8.360 ns, Q1 = 8.619 ns, Median = 8.704 ns, Q3 = 9.041 ns, Max = 9.608 ns\nIQR = 0.423 ns, LowerFence = 7.985 ns, UpperFence = 9.675 ns\nConfidenceInterval = [8.632 ns; 9.027 ns] (CI 99.9%), Margin = 0.198 ns (2.24% of Mean)\nSkewness = 0.86, Kurtosis = 2.67, MValue = 2\n-------------------- Histogram --------------------\n[8.228 ns ; 8.458 ns) | @@\n[8.458 ns ; 8.722 ns) | @@@@@@@@@@@@@@@@@@\n[8.722 ns ; 9.001 ns) | @@@@@@@\n[9.001 ns ; 9.290 ns) | @@@@@@\n[9.290 ns ; 9.645 ns) | @@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyMedium: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 8.496 ns, StdErr = 0.047 ns (0.55%), N = 19, StdDev = 0.205 ns\nMin = 8.310 ns, Q1 = 8.387 ns, Median = 8.416 ns, Q3 = 8.490 ns, Max = 9.118 ns\nIQR = 0.102 ns, LowerFence = 8.234 ns, UpperFence = 8.643 ns\nConfidenceInterval = [8.312 ns; 8.681 ns] (CI 99.9%), Margin = 0.185 ns (2.17% of Mean)\nSkewness = 1.66, Kurtosis = 4.96, MValue = 2\n-------------------- Histogram --------------------\n[8.307 ns ; 8.509 ns) | @@@@@@@@@@@@@@@\n[8.509 ns ; 8.845 ns) | @@@\n[8.845 ns ; 9.219 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.AnyBig: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 8.241 ns, StdErr = 0.014 ns (0.17%), N = 15, StdDev = 0.055 ns\nMin = 8.134 ns, Q1 = 8.214 ns, Median = 8.239 ns, Q3 = 8.281 ns, Max = 8.316 ns\nIQR = 0.067 ns, LowerFence = 8.114 ns, UpperFence = 8.381 ns\nConfidenceInterval = [8.182 ns; 8.300 ns] (CI 99.9%), Margin = 0.059 ns (0.71% of Mean)\nSkewness = -0.49, Kurtosis = 2.06, MValue = 2\n-------------------- Histogram --------------------\n[8.104 ns ; 8.346 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBigList: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 10.431 ns, StdErr = 0.020 ns (0.20%), N = 14, StdDev = 0.076 ns\nMin = 10.323 ns, Q1 = 10.371 ns, Median = 10.431 ns, Q3 = 10.483 ns, Max = 10.566 ns\nIQR = 0.112 ns, LowerFence = 10.203 ns, UpperFence = 10.650 ns\nConfidenceInterval = [10.345 ns; 10.517 ns] (CI 99.9%), Margin = 0.086 ns (0.83% of Mean)\nSkewness = 0.31, Kurtosis = 1.72, MValue = 2\n-------------------- Histogram --------------------\n[10.301 ns ; 10.608 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBigHashet: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 10.855 ns, StdErr = 0.013 ns (0.12%), N = 13, StdDev = 0.046 ns\nMin = 10.802 ns, Q1 = 10.821 ns, Median = 10.845 ns, Q3 = 10.887 ns, Max = 10.957 ns\nIQR = 0.066 ns, LowerFence = 10.722 ns, UpperFence = 10.985 ns\nConfidenceInterval = [10.799 ns; 10.910 ns] (CI 99.9%), Margin = 0.056 ns (0.51% of Mean)\nSkewness = 0.63, Kurtosis = 2.3, MValue = 2\n-------------------- Histogram --------------------\n[10.776 ns ; 10.983 ns) | @@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.AnyBigEnum: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 9.368 ns, StdErr = 0.011 ns (0.12%), N = 14, StdDev = 0.042 ns\nMin = 9.311 ns, Q1 = 9.339 ns, Median = 9.364 ns, Q3 = 9.385 ns, Max = 9.454 ns\nIQR = 0.046 ns, LowerFence = 9.270 ns, UpperFence = 9.454 ns\nConfidenceInterval = [9.320 ns; 9.415 ns] (CI 99.9%), Margin = 0.048 ns (0.51% of Mean)\nSkewness = 0.55, Kurtosis = 2.38, MValue = 2\n-------------------- Histogram --------------------\n[9.288 ns ; 9.470 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.LenghtSmall: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 0.001 ns, StdErr = 0.001 ns (81.90%), N = 13, StdDev = 0.002 ns\nMin = 0.000 ns, Q1 = 0.000 ns, Median = 0.000 ns, Q3 = 0.000 ns, Max = 0.008 ns\nIQR = 0.000 ns, LowerFence = 0.000 ns, UpperFence = 0.000 ns\nConfidenceInterval = [-0.002 ns; 0.004 ns] (CI 99.9%), Margin = 0.003 ns (353.64% of Mean)\nSkewness = 2.72, Kurtosis = 9.06, MValue = 2\n-------------------- Histogram --------------------\n[-0.001 ns ; 0.002 ns) | @@@@@@@@@@@@\n[ 0.002 ns ; 0.004 ns) |\n[ 0.004 ns ; 0.007 ns) |\n[ 0.007 ns ; 0.010 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.LenghtMedium: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 0.006 ns, StdErr = 0.001 ns (23.26%), N = 15, StdDev = 0.005 ns\nMin = 0.000 ns, Q1 = 0.000 ns, Median = 0.006 ns, Q3 = 0.009 ns, Max = 0.018 ns\nIQR = 0.009 ns, LowerFence = -0.013 ns, UpperFence = 0.022 ns\nConfidenceInterval = [0.000 ns; 0.012 ns] (CI 99.9%), Margin = 0.006 ns (96.32% of Mean)\nSkewness = 0.47, Kurtosis = 2.32, MValue = 2.5\n-------------------- Histogram --------------------\n[-0.003 ns ; 0.003 ns) | @@@@@\n[ 0.003 ns ; 0.010 ns) | @@@@@@@@\n[ 0.010 ns ; 0.012 ns) |\n[ 0.012 ns ; 0.018 ns) | @@\n---------------------------------------------------\n\nAnyBenchmark.LenghtBig: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 0.002 ns, StdErr = 0.001 ns (37.84%), N = 14, StdDev = 0.004 ns\nMin = 0.000 ns, Q1 = 0.000 ns, Median = 0.000 ns, Q3 = 0.006 ns, Max = 0.008 ns\nIQR = 0.006 ns, LowerFence = -0.008 ns, UpperFence = 0.014 ns\nConfidenceInterval = [-0.001 ns; 0.006 ns] (CI 99.9%), Margin = 0.004 ns (159.70% of Mean)\nSkewness = 0.78, Kurtosis = 1.66, MValue = 2.8\n-------------------- Histogram --------------------\n[-0.001 ns ; 0.003 ns) | @@@@@@@@@@\n[ 0.003 ns ; 0.005 ns) |\n[ 0.005 ns ; 0.009 ns) | @@@@\n---------------------------------------------------\n\nAnyBenchmark.LenghtBigList: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 0.013 ns, StdErr = 0.005 ns (35.46%), N = 12, StdDev = 0.016 ns\nMin = 0.000 ns, Q1 = 0.000 ns, Median = 0.009 ns, Q3 = 0.016 ns, Max = 0.051 ns\nIQR = 0.016 ns, LowerFence = -0.024 ns, UpperFence = 0.039 ns\nConfidenceInterval = [-0.008 ns; 0.034 ns] (CI 99.9%), Margin = 0.021 ns (157.35% of Mean)\nSkewness = 1.16, Kurtosis = 3.13, MValue = 2\n-------------------- Histogram --------------------\n[-0.003 ns ; 0.020 ns) | @@@@@@@@@\n[ 0.020 ns ; 0.042 ns) | @@\n[ 0.042 ns ; 0.061 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.LenghtBigHashet: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 0.012 ns, StdErr = 0.004 ns (30.90%), N = 33, StdDev = 0.021 ns\nMin = 0.000 ns, Q1 = 0.000 ns, Median = 0.000 ns, Q3 = 0.023 ns, Max = 0.075 ns\nIQR = 0.023 ns, LowerFence = -0.034 ns, UpperFence = 0.056 ns\nConfidenceInterval = [-0.001 ns; 0.025 ns] (CI 99.9%), Margin = 0.013 ns (111.92% of Mean)\nSkewness = 1.57, Kurtosis = 4.32, MValue = 2.42\n-------------------- Histogram --------------------\n[-0.005 ns ; 0.012 ns) | @@@@@@@@@@@@@@@@@@@@@@@@\n[ 0.012 ns ; 0.022 ns) |\n[ 0.022 ns ; 0.039 ns) | @@@@@@\n[ 0.039 ns ; 0.049 ns) |\n[ 0.049 ns ; 0.066 ns) | @@\n[ 0.066 ns ; 0.084 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.LenghtBigEnum: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 2.082 ms, StdErr = 0.012 ms (0.58%), N = 79, StdDev = 0.107 ms\nMin = 1.923 ms, Q1 = 1.972 ms, Median = 2.110 ms, Q3 = 2.160 ms, Max = 2.365 ms\nIQR = 0.188 ms, LowerFence = 1.690 ms, UpperFence = 2.441 ms\nConfidenceInterval = [2.041 ms; 2.124 ms] (CI 99.9%), Margin = 0.041 ms (1.99% of Mean)\nSkewness = 0.15, Kurtosis = 2.16, MValue = 3.16\n-------------------- Histogram --------------------\n[1.890 ms ; 1.939 ms) | @@@@\n[1.939 ms ; 2.005 ms) | @@@@@@@@@@@@@@@@@@@@@@@\n[2.005 ms ; 2.054 ms) | @@@@@\n[2.054 ms ; 2.129 ms) | @@@@@@@@@@\n[2.129 ms ; 2.195 ms) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n[2.195 ms ; 2.271 ms) | @@@\n[2.271 ms ; 2.337 ms) | @@\n[2.337 ms ; 2.398 ms) | @\n---------------------------------------------------\n\nAnyBenchmark.TakeCountSmall: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 46.951 ns, StdErr = 0.709 ns (1.51%), N = 100, StdDev = 7.095 ns\nMin = 35.600 ns, Q1 = 39.960 ns, Median = 49.457 ns, Q3 = 52.809 ns, Max = 61.196 ns\nIQR = 12.849 ns, LowerFence = 20.686 ns, UpperFence = 72.083 ns\nConfidenceInterval = [44.544 ns; 49.357 ns] (CI 99.9%), Margin = 2.406 ns (5.13% of Mean)\nSkewness = -0.26, Kurtosis = 1.78, MValue = 3.3\n-------------------- Histogram --------------------\n[35.586 ns ; 39.598 ns) | @@@@@@@@@@@@@@@@@@@@@@@\n[39.598 ns ; 42.651 ns) | @@@@@@\n[42.651 ns ; 46.664 ns) | @@@@@@@@@@@@@@@@\n[46.664 ns ; 50.077 ns) | @@@@@@@@@\n[50.077 ns ; 54.090 ns) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n[54.090 ns ; 57.976 ns) | @@@@@@\n[57.976 ns ; 62.136 ns) | @@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountMedium: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 41.814 ns, StdErr = 0.678 ns (1.62%), N = 100, StdDev = 6.779 ns\nMin = 35.756 ns, Q1 = 36.265 ns, Median = 37.647 ns, Q3 = 48.903 ns, Max = 56.226 ns\nIQR = 12.638 ns, LowerFence = 17.307 ns, UpperFence = 67.860 ns\nConfidenceInterval = [39.514 ns; 44.113 ns] (CI 99.9%), Margin = 2.299 ns (5.50% of Mean)\nSkewness = 0.71, Kurtosis = 1.76, MValue = 2.81\n-------------------- Histogram --------------------\n[35.699 ns ; 39.533 ns) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n[39.533 ns ; 43.612 ns) | @@@@@@@\n[43.612 ns ; 44.946 ns) |\n[44.946 ns ; 48.779 ns) | @@@@@@@@@\n[48.779 ns ; 53.806 ns) | @@@@@@@@@@@@@@@@@@@@@@@@\n[53.806 ns ; 58.143 ns) | @\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBig: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 35.496 ns, StdErr = 0.162 ns (0.46%), N = 14, StdDev = 0.607 ns\nMin = 34.784 ns, Q1 = 35.150 ns, Median = 35.337 ns, Q3 = 35.719 ns, Max = 36.875 ns\nIQR = 0.568 ns, LowerFence = 34.297 ns, UpperFence = 36.571 ns\nConfidenceInterval = [34.811 ns; 36.180 ns] (CI 99.9%), Margin = 0.684 ns (1.93% of Mean)\nSkewness = 1.03, Kurtosis = 2.89, MValue = 2\n-------------------- Histogram --------------------\n[34.747 ns ; 36.223 ns) | @@@@@@@@@@@@\n[36.223 ns ; 37.094 ns) | @@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBigList: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 38.437 ns, StdErr = 0.140 ns (0.37%), N = 15, StdDev = 0.543 ns\nMin = 37.876 ns, Q1 = 38.044 ns, Median = 38.131 ns, Q3 = 38.690 ns, Max = 39.597 ns\nIQR = 0.646 ns, LowerFence = 37.074 ns, UpperFence = 39.660 ns\nConfidenceInterval = [37.856 ns; 39.018 ns] (CI 99.9%), Margin = 0.581 ns (1.51% of Mean)\nSkewness = 0.81, Kurtosis = 2.2, MValue = 2\n-------------------- Histogram --------------------\n[37.587 ns ; 38.648 ns) | @@@@@@@@@@@\n[38.648 ns ; 39.887 ns) | @@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBigHashet: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 38.268 ns, StdErr = 0.066 ns (0.17%), N = 14, StdDev = 0.249 ns\nMin = 38.041 ns, Q1 = 38.084 ns, Median = 38.190 ns, Q3 = 38.283 ns, Max = 38.874 ns\nIQR = 0.199 ns, LowerFence = 37.786 ns, UpperFence = 38.581 ns\nConfidenceInterval = [37.988 ns; 38.549 ns] (CI 99.9%), Margin = 0.280 ns (0.73% of Mean)\nSkewness = 1.18, Kurtosis = 3.16, MValue = 2\n-------------------- Histogram --------------------\n[37.905 ns ; 39.010 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.TakeCountBigEnum: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 36.392 ns, StdErr = 0.033 ns (0.09%), N = 14, StdDev = 0.122 ns\nMin = 36.178 ns, Q1 = 36.295 ns, Median = 36.402 ns, Q3 = 36.469 ns, Max = 36.620 ns\nIQR = 0.174 ns, LowerFence = 36.034 ns, UpperFence = 36.730 ns\nConfidenceInterval = [36.255 ns; 36.530 ns] (CI 99.9%), Margin = 0.137 ns (0.38% of Mean)\nSkewness = 0.08, Kurtosis = 2.06, MValue = 2\n-------------------- Histogram --------------------\n[36.112 ns ; 36.686 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckSmall: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 8.167 ns, StdErr = 0.012 ns (0.15%), N = 14, StdDev = 0.046 ns\nMin = 8.101 ns, Q1 = 8.132 ns, Median = 8.163 ns, Q3 = 8.189 ns, Max = 8.259 ns\nIQR = 0.057 ns, LowerFence = 8.045 ns, UpperFence = 8.275 ns\nConfidenceInterval = [8.115 ns; 8.220 ns] (CI 99.9%), Margin = 0.052 ns (0.64% of Mean)\nSkewness = 0.44, Kurtosis = 2.16, MValue = 2\n-------------------- Histogram --------------------\n[8.090 ns ; 8.285 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckMedium: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 8.126 ns, StdErr = 0.009 ns (0.11%), N = 13, StdDev = 0.031 ns\nMin = 8.074 ns, Q1 = 8.101 ns, Median = 8.133 ns, Q3 = 8.145 ns, Max = 8.177 ns\nIQR = 0.044 ns, LowerFence = 8.035 ns, UpperFence = 8.211 ns\nConfidenceInterval = [8.089 ns; 8.163 ns] (CI 99.9%), Margin = 0.037 ns (0.45% of Mean)\nSkewness = -0.3, Kurtosis = 1.88, MValue = 2\n-------------------- Histogram --------------------\n[8.057 ns ; 8.194 ns) | @@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBig: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 7.976 ns, StdErr = 0.006 ns (0.08%), N = 15, StdDev = 0.024 ns\nMin = 7.939 ns, Q1 = 7.956 ns, Median = 7.982 ns, Q3 = 7.990 ns, Max = 8.022 ns\nIQR = 0.034 ns, LowerFence = 7.906 ns, UpperFence = 8.041 ns\nConfidenceInterval = [7.950 ns; 8.002 ns] (CI 99.9%), Margin = 0.026 ns (0.33% of Mean)\nSkewness = 0.22, Kurtosis = 1.75, MValue = 2\n-------------------- Histogram --------------------\n[7.926 ns ; 8.035 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBigList: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 10.421 ns, StdErr = 0.063 ns (0.61%), N = 37, StdDev = 0.385 ns\nMin = 9.996 ns, Q1 = 10.115 ns, Median = 10.266 ns, Q3 = 10.708 ns, Max = 11.334 ns\nIQR = 0.593 ns, LowerFence = 9.225 ns, UpperFence = 11.598 ns\nConfidenceInterval = [10.194 ns; 10.648 ns] (CI 99.9%), Margin = 0.227 ns (2.18% of Mean)\nSkewness = 0.92, Kurtosis = 2.52, MValue = 2.36\n-------------------- Histogram --------------------\n[ 9.994 ns ; 10.297 ns) | @@@@@@@@@@@@@@@@@@@@@@\n[10.297 ns ; 10.601 ns) | @@@\n[10.601 ns ; 10.905 ns) | @@@@@@@\n[10.905 ns ; 11.486 ns) | @@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBigHashset: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 10.856 ns, StdErr = 0.032 ns (0.30%), N = 14, StdDev = 0.120 ns\nMin = 10.712 ns, Q1 = 10.777 ns, Median = 10.827 ns, Q3 = 10.874 ns, Max = 11.142 ns\nIQR = 0.096 ns, LowerFence = 10.633 ns, UpperFence = 11.018 ns\nConfidenceInterval = [10.721 ns; 10.992 ns] (CI 99.9%), Margin = 0.135 ns (1.25% of Mean)\nSkewness = 0.96, Kurtosis = 2.96, MValue = 2\n-------------------- Histogram --------------------\n[10.710 ns ; 11.208 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\nAnyBenchmark.EnumeratorCheckBigEnumerable: .NET Framework 4.8(Runtime=.NET Framework 4.8)\nRuntime = .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256; GC = Concurrent Workstation\nMean = 9.363 ns, StdErr = 0.016 ns (0.17%), N = 14, StdDev = 0.060 ns\nMin = 9.294 ns, Q1 = 9.321 ns, Median = 9.344 ns, Q3 = 9.382 ns, Max = 9.503 ns\nIQR = 0.061 ns, LowerFence = 9.230 ns, UpperFence = 9.473 ns\nConfidenceInterval = [9.294 ns; 9.431 ns] (CI 99.9%), Margin = 0.068 ns (0.73% of Mean)\nSkewness = 0.89, Kurtosis = 2.75, MValue = 2\n-------------------- Histogram --------------------\n[9.261 ns ; 9.536 ns) | @@@@@@@@@@@@@@\n---------------------------------------------------\n\n// * Summary *\n\nBenchmarkDotNet v0.13.12, Windows 10 (10.0.19045.3930/22H2/2022Update)\n12th Gen Intel Core i9-12900H, 1 CPU, 20 logical and 14 physical cores\n.NET SDK 8.0.101\n  [Host]             : .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2\n  Job-FQEJOX         : .NET 7.0.15 (7.0.1523.57226), X64 RyuJIT AVX2\n  Job-DISSLE         : .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2\n  Job-HXWWDC         : .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256\n  .NET 6.0           : .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2\n  .NET 8.0           : .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2\n  .NET Framework 4.8 : .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256\n</code></pre> Method Job Runtime Mean Error StdDev Median Ratio RatioSD Gen0 Allocated Alloc Ratio AnySmall Job-FQEJOX .NET 7.0 5.5193 ns 0.1327 ns 0.2180 ns 5.4247 ns 65.202 9.06 - - NA AnyMedium Job-FQEJOX .NET 7.0 5.1544 ns 0.0087 ns 0.0073 ns 5.1556 ns 58.754 9.03 - - NA AnyBig Job-FQEJOX .NET 7.0 5.6388 ns 0.0147 ns 0.0137 ns 5.6380 ns 64.855 9.31 - - NA AnyBigList Job-FQEJOX .NET 7.0 3.4669 ns 0.0104 ns 0.0087 ns 3.4654 ns 39.521 6.10 - - NA AnyBigHashet Job-FQEJOX .NET 7.0 3.4412 ns 0.0104 ns 0.0097 ns 3.4423 ns 39.574 5.64 - - NA AnyBigEnum Job-FQEJOX .NET 7.0 11.7390 ns 0.0935 ns 0.0829 ns 11.7125 ns 134.898 20.21 0.0032 40 B NA LenghtSmall Job-FQEJOX .NET 7.0 0.0000 ns 0.0000 ns 0.0000 ns 0.0000 ns 0.000 0.00 - - NA LenghtMedium Job-FQEJOX .NET 7.0 0.0005 ns 0.0020 ns 0.0016 ns 0.0000 ns 0.005 0.02 - - NA LenghtBig Job-FQEJOX .NET 7.0 0.0003 ns 0.0008 ns 0.0008 ns 0.0000 ns 0.004 0.01 - - NA LenghtBigList Job-FQEJOX .NET 7.0 0.0002 ns 0.0007 ns 0.0006 ns 0.0000 ns 0.002 0.01 - - NA LenghtBigHashet Job-FQEJOX .NET 7.0 0.0024 ns 0.0024 ns 0.0020 ns 0.0023 ns 0.027 0.02 - - NA LenghtBigEnum Job-FQEJOX .NET 7.0 2,226,575.1302 ns 17,281.0371 ns 16,164.6929 ns 2,232,578.9062 ns 25,624,584.160 3,797,599.39 - 42 B NA TakeCountSmall Job-FQEJOX .NET 7.0 22.8527 ns 0.2173 ns 0.1815 ns 22.8633 ns 260.402 39.29 0.0038 48 B NA TakeCountMedium Job-FQEJOX .NET 7.0 24.4885 ns 0.2504 ns 0.2342 ns 24.5083 ns 281.775 41.39 0.0038 48 B NA TakeCountBig Job-FQEJOX .NET 7.0 22.7268 ns 0.2396 ns 0.2241 ns 22.8053 ns 261.403 37.73 0.0038 48 B NA TakeCountBigList Job-FQEJOX .NET 7.0 20.2234 ns 0.1097 ns 0.0973 ns 20.2509 ns 232.443 35.16 0.0038 48 B NA TakeCountBigHashet Job-FQEJOX .NET 7.0 30.9384 ns 0.1732 ns 0.1620 ns 31.0010 ns 355.901 51.69 0.0076 96 B NA TakeCountBigEnum Job-FQEJOX .NET 7.0 26.0982 ns 0.3957 ns 0.3702 ns 26.0341 ns 300.198 43.41 0.0076 96 B NA EnumeratorCheckSmall Job-FQEJOX .NET 7.0 5.9595 ns 0.0359 ns 0.0336 ns 5.9563 ns 68.551 9.91 - - NA EnumeratorCheckMedium Job-FQEJOX .NET 7.0 5.9652 ns 0.0330 ns 0.0309 ns 5.9524 ns 68.601 9.78 - - NA EnumeratorCheckBig Job-FQEJOX .NET 7.0 6.4964 ns 0.0572 ns 0.0535 ns 6.4886 ns 74.742 10.93 - - NA EnumeratorCheckBigList Job-FQEJOX .NET 7.0 4.0621 ns 0.0266 ns 0.0248 ns 4.0571 ns 46.736 6.86 - - NA EnumeratorCheckBigHashset Job-FQEJOX .NET 7.0 4.0694 ns 0.0236 ns 0.0209 ns 4.0658 ns 46.750 6.90 - - NA EnumeratorCheckBigEnumerable Job-FQEJOX .NET 7.0 14.7422 ns 0.0895 ns 0.0837 ns 14.7575 ns 169.591 24.59 0.0032 40 B NA AnySmall Job-DISSLE .NET 8.0 5.4162 ns 0.1301 ns 0.1278 ns 5.3537 ns 62.244 8.54 - - NA AnyMedium Job-DISSLE .NET 8.0 5.2541 ns 0.0240 ns 0.0213 ns 5.2591 ns 60.364 8.95 - - NA AnyBig Job-DISSLE .NET 8.0 5.2532 ns 0.0234 ns 0.0208 ns 5.2545 ns 60.346 8.89 - - NA AnyBigList Job-DISSLE .NET 8.0 2.1404 ns 0.0248 ns 0.0220 ns 2.1382 ns 24.620 3.87 - - NA AnyBigHashet Job-DISSLE .NET 8.0 2.1367 ns 0.0214 ns 0.0200 ns 2.1318 ns 24.567 3.47 - - NA AnyBigEnum Job-DISSLE .NET 8.0 10.3076 ns 0.0988 ns 0.0924 ns 10.3198 ns 118.566 17.16 0.0032 40 B NA LenghtSmall Job-DISSLE .NET 8.0 0.0001 ns 0.0002 ns 0.0002 ns 0.0000 ns 0.001 0.00 - - NA LenghtMedium Job-DISSLE .NET 8.0 0.0001 ns 0.0004 ns 0.0004 ns 0.0000 ns 0.001 0.00 - - NA LenghtBig Job-DISSLE .NET 8.0 0.0009 ns 0.0009 ns 0.0009 ns 0.0008 ns 0.011 0.01 - - NA LenghtBigList Job-DISSLE .NET 8.0 0.0003 ns 0.0005 ns 0.0005 ns 0.0000 ns 0.003 0.00 - - NA LenghtBigHashet Job-DISSLE .NET 8.0 0.0000 ns 0.0001 ns 0.0001 ns 0.0000 ns 0.000 0.00 - - NA LenghtBigEnum Job-DISSLE .NET 8.0 661,041.0095 ns 12,414.3956 ns 12,192.5964 ns 661,278.4180 ns 7,595,090.687 1,066,456.21 - 40 B NA TakeCountSmall Job-DISSLE .NET 8.0 16.5871 ns 0.3065 ns 0.2560 ns 16.5038 ns 189.334 31.13 0.0038 48 B NA TakeCountMedium Job-DISSLE .NET 8.0 16.4673 ns 0.1167 ns 0.1091 ns 16.4832 ns 189.470 27.73 0.0038 48 B NA TakeCountBig Job-DISSLE .NET 8.0 17.4318 ns 0.1367 ns 0.1279 ns 17.4259 ns 200.547 29.32 0.0038 48 B NA TakeCountBigList Job-DISSLE .NET 8.0 12.6229 ns 0.1297 ns 0.1083 ns 12.5937 ns 143.948 22.60 0.0038 48 B NA TakeCountBigHashet Job-DISSLE .NET 8.0 22.1075 ns 0.2167 ns 0.2027 ns 22.1383 ns 254.360 37.33 0.0076 96 B NA TakeCountBigEnum Job-DISSLE .NET 8.0 19.4930 ns 0.2367 ns 0.1976 ns 19.4981 ns 222.361 35.57 0.0076 96 B NA EnumeratorCheckSmall Job-DISSLE .NET 8.0 5.2012 ns 0.0294 ns 0.0275 ns 5.1994 ns 59.833 8.68 - - NA EnumeratorCheckMedium Job-DISSLE .NET 8.0 5.2079 ns 0.0542 ns 0.0507 ns 5.2125 ns 59.908 8.66 - - NA EnumeratorCheckBig Job-DISSLE .NET 8.0 5.4552 ns 0.1309 ns 0.1703 ns 5.4111 ns 62.725 9.20 - - NA EnumeratorCheckBigList Job-DISSLE .NET 8.0 1.6329 ns 0.0244 ns 0.0204 ns 1.6312 ns 18.626 2.96 - - NA EnumeratorCheckBigHashset Job-DISSLE .NET 8.0 1.9001 ns 0.0196 ns 0.0183 ns 1.9052 ns 21.867 3.22 - - NA EnumeratorCheckBigEnumerable Job-DISSLE .NET 8.0 9.4113 ns 0.1107 ns 0.1036 ns 9.4083 ns 108.290 15.99 0.0032 40 B NA AnySmall Job-HXWWDC .NET Framework 4.8 8.9172 ns 0.0583 ns 0.0517 ns 8.9278 ns 102.437 15.10 0.0051 32 B NA AnyMedium Job-HXWWDC .NET Framework 4.8 8.9023 ns 0.0359 ns 0.0336 ns 8.9003 ns 102.409 14.84 0.0051 32 B NA AnyBig Job-HXWWDC .NET Framework 4.8 8.7063 ns 0.0455 ns 0.0426 ns 8.6963 ns 100.147 14.48 0.0051 32 B NA AnyBigList Job-HXWWDC .NET Framework 4.8 10.8967 ns 0.0991 ns 0.0927 ns 10.9160 ns 125.333 18.08 0.0064 40 B NA AnyBigHashet Job-HXWWDC .NET Framework 4.8 11.5538 ns 0.0913 ns 0.0854 ns 11.5405 ns 132.825 18.59 0.0064 40 B NA AnyBigEnum Job-HXWWDC .NET Framework 4.8 9.6281 ns 0.0294 ns 0.0261 ns 9.6330 ns 110.624 16.43 0.0064 40 B NA LenghtSmall Job-HXWWDC .NET Framework 4.8 0.0869 ns 0.0110 ns 0.0103 ns 0.0877 ns 0.996 0.17 - - NA LenghtMedium Job-HXWWDC .NET Framework 4.8 0.0802 ns 0.0130 ns 0.0122 ns 0.0814 ns 0.922 0.19 - - NA LenghtBig Job-HXWWDC .NET Framework 4.8 0.0886 ns 0.0133 ns 0.0125 ns 0.0911 ns 1.000 0.00 - - NA LenghtBigList Job-HXWWDC .NET Framework 4.8 0.0913 ns 0.0096 ns 0.0090 ns 0.0921 ns 1.051 0.19 - - NA LenghtBigHashet Job-HXWWDC .NET Framework 4.8 0.0854 ns 0.0137 ns 0.0128 ns 0.0882 ns 0.977 0.17 - - NA LenghtBigEnum Job-HXWWDC .NET Framework 4.8 1,953,247.9427 ns 20,814.0771 ns 19,469.5006 ns 1,957,055.8594 ns 22,449,133.005 3,105,356.20 - 48 B NA TakeCountSmall Job-HXWWDC .NET Framework 4.8 37.5990 ns 0.2007 ns 0.1878 ns 37.5965 ns 432.480 62.44 0.0153 96 B NA TakeCountMedium Job-HXWWDC .NET Framework 4.8 37.4735 ns 0.1562 ns 0.1385 ns 37.4845 ns 430.604 64.31 0.0153 96 B NA TakeCountBig Job-HXWWDC .NET Framework 4.8 36.9597 ns 0.0989 ns 0.0877 ns 36.9657 ns 424.670 63.21 0.0153 96 B NA TakeCountBigList Job-HXWWDC .NET Framework 4.8 40.6202 ns 0.1217 ns 0.1079 ns 40.6351 ns 466.783 69.91 0.0166 104 B NA TakeCountBigHashet Job-HXWWDC .NET Framework 4.8 40.8127 ns 0.2308 ns 0.2159 ns 40.8755 ns 469.425 67.55 0.0166 104 B NA TakeCountBigEnum Job-HXWWDC .NET Framework 4.8 38.1219 ns 0.2162 ns 0.1917 ns 38.1214 ns 438.071 65.63 0.0166 104 B NA EnumeratorCheckSmall Job-HXWWDC .NET Framework 4.8 8.7670 ns 0.1002 ns 0.0783 ns 8.7591 ns 101.770 14.79 0.0051 32 B NA EnumeratorCheckMedium Job-HXWWDC .NET Framework 4.8 8.7582 ns 0.0310 ns 0.0275 ns 8.7665 ns 100.631 14.97 0.0051 32 B NA EnumeratorCheckBig Job-HXWWDC .NET Framework 4.8 8.5148 ns 0.0384 ns 0.0359 ns 8.5116 ns 97.958 14.25 0.0051 32 B NA EnumeratorCheckBigList Job-HXWWDC .NET Framework 4.8 10.8016 ns 0.0684 ns 0.0571 ns 10.7921 ns 123.103 18.80 0.0064 40 B NA EnumeratorCheckBigHashset Job-HXWWDC .NET Framework 4.8 10.8766 ns 0.1809 ns 0.2707 ns 10.7795 ns 126.852 19.70 0.0064 40 B NA EnumeratorCheckBigEnumerable Job-HXWWDC .NET Framework 4.8 8.9985 ns 0.0472 ns 0.0441 ns 8.9986 ns 103.508 14.96 0.0064 40 B NA AnySmall .NET 6.0 .NET 6.0 5.2398 ns 0.0316 ns 0.0280 ns 5.2438 ns 60.210 9.03 - - NA AnyMedium .NET 6.0 .NET 6.0 5.9405 ns 0.0377 ns 0.0353 ns 5.9402 ns 68.323 9.80 - - NA AnyBig .NET 6.0 .NET 6.0 5.8831 ns 0.0301 ns 0.0267 ns 5.8836 ns 67.594 10.04 - - NA AnyBigList .NET 6.0 .NET 6.0 3.4517 ns 0.0233 ns 0.0195 ns 3.4458 ns 39.345 6.04 - - NA AnyBigHashet .NET 6.0 .NET 6.0 3.4463 ns 0.0174 ns 0.0162 ns 3.4477 ns 39.641 5.71 - - NA AnyBigEnum .NET 6.0 .NET 6.0 12.9680 ns 0.0699 ns 0.0583 ns 12.9710 ns 147.827 22.83 0.0032 40 B NA LenghtSmall .NET 6.0 .NET 6.0 0.0027 ns 0.0042 ns 0.0040 ns 0.0006 ns 0.035 0.06 - - NA LenghtMedium .NET 6.0 .NET 6.0 0.0035 ns 0.0038 ns 0.0033 ns 0.0025 ns 0.041 0.04 - - NA LenghtBig .NET 6.0 .NET 6.0 0.0054 ns 0.0054 ns 0.0050 ns 0.0044 ns 0.064 0.06 - - NA LenghtBigList .NET 6.0 .NET 6.0 0.0026 ns 0.0041 ns 0.0036 ns 0.0011 ns 0.030 0.04 - - NA LenghtBigHashet .NET 6.0 .NET 6.0 0.0019 ns 0.0031 ns 0.0029 ns 0.0000 ns 0.023 0.04 - - NA LenghtBigEnum .NET 6.0 .NET 6.0 1,876,763.1836 ns 12,052.7287 ns 10,684.4300 ns 1,877,488.6719 ns 21,573,726.715 3,278,017.59 - 41 B NA TakeCountSmall .NET 6.0 .NET 6.0 24.1002 ns 0.4935 ns 0.6060 ns 23.8477 ns 277.947 39.09 0.0038 48 B NA TakeCountMedium .NET 6.0 .NET 6.0 23.0748 ns 0.1251 ns 0.1045 ns 23.0913 ns 263.125 41.21 0.0038 48 B NA TakeCountBig .NET 6.0 .NET 6.0 22.9302 ns 0.1478 ns 0.1382 ns 22.9288 ns 263.691 37.59 0.0038 48 B NA TakeCountBigList .NET 6.0 .NET 6.0 18.0401 ns 0.0805 ns 0.0714 ns 18.0156 ns 207.305 31.02 0.0038 48 B NA TakeCountBigHashet .NET 6.0 .NET 6.0 27.3599 ns 0.0931 ns 0.0778 ns 27.3778 ns 311.893 48.13 0.0076 96 B NA TakeCountBigEnum .NET 6.0 .NET 6.0 23.2108 ns 0.1167 ns 0.1092 ns 23.2047 ns 266.990 38.64 0.0076 96 B NA EnumeratorCheckSmall .NET 6.0 .NET 6.0 6.9561 ns 0.0445 ns 0.0394 ns 6.9500 ns 79.916 11.81 - - NA EnumeratorCheckMedium .NET 6.0 .NET 6.0 6.9923 ns 0.0569 ns 0.0532 ns 6.9754 ns 80.464 11.89 - - NA EnumeratorCheckBig .NET 6.0 .NET 6.0 6.9656 ns 0.0494 ns 0.0462 ns 6.9621 ns 80.123 11.57 - - NA EnumeratorCheckBigList .NET 6.0 .NET 6.0 4.1412 ns 0.0203 ns 0.0180 ns 4.1391 ns 47.601 7.22 - - NA EnumeratorCheckBigHashset .NET 6.0 .NET 6.0 4.2728 ns 0.0745 ns 0.0697 ns 4.2376 ns 49.132 7.11 - - NA EnumeratorCheckBigEnumerable .NET 6.0 .NET 6.0 14.2448 ns 0.1028 ns 0.0858 ns 14.2237 ns 162.303 24.45 0.0032 40 B NA AnySmall .NET 8.0 .NET 8.0 5.1925 ns 0.0959 ns 0.0850 ns 5.1694 ns 59.639 8.73 - - NA AnyMedium .NET 8.0 .NET 8.0 5.1217 ns 0.0265 ns 0.0234 ns 5.1206 ns 58.865 8.89 - - NA AnyBig .NET 8.0 .NET 8.0 5.1222 ns 0.0343 ns 0.0321 ns 5.1150 ns 58.899 8.37 - - NA AnyBigList .NET 8.0 .NET 8.0 2.0881 ns 0.0103 ns 0.0097 ns 2.0854 ns 24.013 3.41 - - NA AnyBigHashet .NET 8.0 .NET 8.0 2.0957 ns 0.0163 ns 0.0152 ns 2.0912 ns 24.096 3.39 - - NA AnyBigEnum .NET 8.0 .NET 8.0 9.3060 ns 0.0794 ns 0.0704 ns 9.3341 ns 106.981 16.35 0.0032 40 B NA LenghtSmall .NET 8.0 .NET 8.0 0.0079 ns 0.0040 ns 0.0034 ns 0.0071 ns 0.088 0.04 - - NA LenghtMedium .NET 8.0 .NET 8.0 0.0084 ns 0.0025 ns 0.0022 ns 0.0081 ns 0.094 0.02 - - NA LenghtBig .NET 8.0 .NET 8.0 0.0177 ns 0.0155 ns 0.0145 ns 0.0106 ns 0.204 0.17 - - NA LenghtBigList .NET 8.0 .NET 8.0 0.0095 ns 0.0103 ns 0.0096 ns 0.0075 ns 0.109 0.11 - - NA LenghtBigHashet .NET 8.0 .NET 8.0 0.0043 ns 0.0048 ns 0.0045 ns 0.0033 ns 0.051 0.06 - - NA LenghtBigEnum .NET 8.0 .NET 8.0 583,897.4870 ns 5,331.3646 ns 4,986.9617 ns 583,399.2188 ns 6,710,928.141 927,062.79 - 40 B NA TakeCountSmall .NET 8.0 .NET 8.0 15.3626 ns 0.1663 ns 0.1555 ns 15.4056 ns 176.801 26.32 0.0038 48 B NA TakeCountMedium .NET 8.0 .NET 8.0 15.2003 ns 0.1484 ns 0.1316 ns 15.2219 ns 174.734 26.66 0.0038 48 B NA TakeCountBig .NET 8.0 .NET 8.0 15.3505 ns 0.1845 ns 0.1726 ns 15.3659 ns 176.511 25.09 0.0038 48 B NA TakeCountBigList .NET 8.0 .NET 8.0 11.5651 ns 0.0883 ns 0.0783 ns 11.5721 ns 132.924 20.10 0.0038 48 B NA TakeCountBigHashet .NET 8.0 .NET 8.0 20.1079 ns 0.2957 ns 0.2621 ns 20.0648 ns 231.013 34.43 0.0076 96 B NA TakeCountBigEnum .NET 8.0 .NET 8.0 18.0136 ns 0.1230 ns 0.1090 ns 18.0617 ns 206.957 30.65 0.0076 96 B NA EnumeratorCheckSmall .NET 8.0 .NET 8.0 5.1381 ns 0.0116 ns 0.0097 ns 5.1419 ns 58.570 9.03 - - NA EnumeratorCheckMedium .NET 8.0 .NET 8.0 5.1231 ns 0.0325 ns 0.0288 ns 5.1211 ns 58.861 8.73 - - NA EnumeratorCheckBig .NET 8.0 .NET 8.0 5.1499 ns 0.0195 ns 0.0182 ns 5.1531 ns 59.236 8.54 - - NA EnumeratorCheckBigList .NET 8.0 .NET 8.0 1.7404 ns 0.0547 ns 0.0511 ns 1.7427 ns 20.000 2.83 - - NA EnumeratorCheckBigHashset .NET 8.0 .NET 8.0 1.9157 ns 0.0459 ns 0.0430 ns 1.9023 ns 22.025 3.18 - - NA EnumeratorCheckBigEnumerable .NET 8.0 .NET 8.0 9.5219 ns 0.2065 ns 0.1612 ns 9.4902 ns 110.520 15.98 0.0032 40 B NA AnySmall .NET Framework 4.8 .NET Framework 4.8 8.8293 ns 0.1976 ns 0.3355 ns 8.7041 ns 102.096 14.83 0.0051 32 B NA AnyMedium .NET Framework 4.8 .NET Framework 4.8 8.4963 ns 0.1847 ns 0.2053 ns 8.4157 ns 97.913 13.33 0.0051 32 B NA AnyBig .NET Framework 4.8 .NET Framework 4.8 8.2408 ns 0.0589 ns 0.0551 ns 8.2385 ns 94.792 13.68 0.0051 32 B NA AnyBigList .NET Framework 4.8 .NET Framework 4.8 10.4312 ns 0.0862 ns 0.0764 ns 10.4310 ns 119.902 18.24 0.0064 40 B NA AnyBigHashet .NET Framework 4.8 .NET Framework 4.8 10.8548 ns 0.0556 ns 0.0464 ns 10.8447 ns 123.719 18.92 0.0064 40 B NA AnyBigEnum .NET Framework 4.8 .NET Framework 4.8 9.3675 ns 0.0479 ns 0.0425 ns 9.3642 ns 107.658 16.20 0.0064 40 B NA LenghtSmall .NET Framework 4.8 .NET Framework 4.8 0.0008 ns 0.0027 ns 0.0023 ns 0.0000 ns 0.010 0.03 - - NA LenghtMedium .NET Framework 4.8 .NET Framework 4.8 0.0060 ns 0.0058 ns 0.0054 ns 0.0064 ns 0.069 0.06 - - NA LenghtBig .NET Framework 4.8 .NET Framework 4.8 0.0025 ns 0.0040 ns 0.0035 ns 0.0002 ns 0.029 0.04 - - NA LenghtBigList .NET Framework 4.8 .NET Framework 4.8 0.0131 ns 0.0206 ns 0.0161 ns 0.0094 ns 0.153 0.18 - - NA LenghtBigHashet .NET Framework 4.8 .NET Framework 4.8 0.0117 ns 0.0131 ns 0.0207 ns 0.0000 ns 0.170 0.30 - - NA LenghtBigEnum .NET Framework 4.8 .NET Framework 4.8 2,082,435.3046 ns 41,349.8025 ns 107,473.6346 ns 2,110,085.1562 ns 23,815,359.344 4,121,613.89 - 64 B NA TakeCountSmall .NET Framework 4.8 .NET Framework 4.8 46.9507 ns 2.4063 ns 7.0949 ns 49.4569 ns 597.780 105.89 0.0153 96 B NA TakeCountMedium .NET Framework 4.8 .NET Framework 4.8 41.8135 ns 2.2990 ns 6.7788 ns 37.6470 ns 518.330 81.82 0.0153 96 B NA TakeCountBig .NET Framework 4.8 .NET Framework 4.8 35.4960 ns 0.6845 ns 0.6068 ns 35.3374 ns 407.777 60.11 0.0153 96 B NA TakeCountBigList .NET Framework 4.8 .NET Framework 4.8 38.4373 ns 0.5809 ns 0.5434 ns 38.1308 ns 441.967 62.86 0.0166 104 B NA TakeCountBigHashet .NET Framework 4.8 .NET Framework 4.8 38.2684 ns 0.2804 ns 0.2486 ns 38.1903 ns 439.749 65.73 0.0166 104 B NA TakeCountBigEnum .NET Framework 4.8 .NET Framework 4.8 36.3923 ns 0.1373 ns 0.1217 ns 36.4024 ns 418.172 62.42 0.0166 104 B NA EnumeratorCheckSmall .NET Framework 4.8 .NET Framework 4.8 8.1673 ns 0.0523 ns 0.0464 ns 8.1634 ns 93.856 14.09 0.0051 32 B NA EnumeratorCheckMedium .NET Framework 4.8 .NET Framework 4.8 8.1260 ns 0.0368 ns 0.0308 ns 8.1328 ns 92.623 14.20 0.0051 32 B NA EnumeratorCheckBig .NET Framework 4.8 .NET Framework 4.8 7.9763 ns 0.0262 ns 0.0245 ns 7.9818 ns 91.736 13.14 0.0051 32 B NA EnumeratorCheckBigList .NET Framework 4.8 .NET Framework 4.8 10.4208 ns 0.2269 ns 0.3852 ns 10.2657 ns 119.707 18.83 0.0064 40 B NA EnumeratorCheckBigHashset .NET Framework 4.8 .NET Framework 4.8 10.8562 ns 0.1353 ns 0.1200 ns 10.8268 ns 124.759 18.83 0.0064 40 B NA EnumeratorCheckBigEnumerable .NET Framework 4.8 .NET Framework 4.8 9.3627 ns 0.0682 ns 0.0605 ns 9.3436 ns 107.560 15.90 0.0064 40 B NA"},{"location":"EnumFlagChecks/","title":"Enum HasFlag() Benchmark","text":""},{"location":"EnumFlagChecks/#benchmark-1-native-dotnet-method","title":"Benchmark 1: Native Dotnet Method","text":"<p>In C# theres the possibility to just call <code>Enum.HasFlag(enumMember)</code>. This method has been rewritten during the Release of dotnet 5. Thus the Benchmarks for net48 will suck really really bad. The reason behind this mess is due to the fact that it had to perform some checks and is not jit optimized </p>"},{"location":"EnumFlagChecks/#benchmark-2-genericcontainsflag","title":"Benchmark 2: GenericContainsFlag","text":"<p>Flagged enums are actually kinda simple. They're only binary values. Flag A = 0x0001 Flag B = 0x0010 -&gt; Flag A AND Flag B = 0x0011</p> <p>So its sufficient to perform a logical OR operation: <pre><code>  0x0011\n&amp; 0x0100\n= 0x0000 // Does not contain this EnumMember\n\n  0x0011\n&amp; 0x0010\n= 0x0010 // Contains this EnumMember\n</code></pre></p> <p>This generic approach has to deal with the same problem as the native implementation. FlagChecks can only work on enum classes which contan the <code>[Flags]</code> attribute.</p> <p>I'll go for a cast here and I expect this to peform even worse than dotnets native method</p> <pre><code>    public static bool ContainsFlagGeneric&lt;T&gt;(this T @enum,\n                                       T flagToTest)\n        where T: Enum\n        =&gt; (Convert.ToInt32(@enum) &amp; Convert.ToInt32(flagToTest)) != 0;\n</code></pre>"},{"location":"EnumFlagChecks/#benchmark-3-explicitcontainsflag","title":"Benchmark 3: ExplicitContainsFlag","text":"<p>When the EnumType is known ( and thus its ensured that it contains the attribute ) I can directly perform the logical AND . While this implementation will outperform both other Methods by large using net48 it might perform worse on more recent targetFrameworks.</p> <pre><code>    public static bool ContainsFlag(this TestEnum testEnum,\n                                    TestEnum flag)\n        =&gt; (testEnum &amp; flag) != 0;\n</code></pre>"},{"location":"EnumFlagChecks/#results","title":"Results","text":"<p>Well everything as expected</p> Method Job Runtime TestEnum Mean Error StdDev Median Gen0 Allocated DotnetsHasFlag .NET 6.0 .NET 6.0 X1 0.0024 ns 0.0041 ns 0.0039 ns 0.0000 ns - - ContainsFlagGeneric .NET 6.0 .NET 6.0 X1 30.0068 ns 0.1473 ns 0.1306 ns 30.0199 ns 0.0076 96 B ContainsFlagExplicit .NET 6.0 .NET 6.0 X1 0.0077 ns 0.0045 ns 0.0042 ns 0.0064 ns - - DotnetsHasFlag .NET 8.0 .NET 8.0 X1 0.0003 ns 0.0005 ns 0.0005 ns 0.0000 ns - - ContainsFlagGeneric .NET 8.0 .NET 8.0 X1 18.3309 ns 0.0862 ns 0.0720 ns 18.3499 ns 0.0076 96 B ContainsFlagExplicit .NET 8.0 .NET 8.0 X1 0.0002 ns 0.0004 ns 0.0003 ns 0.0000 ns - - DotnetsHasFlag .NET Framework 4.8 .NET Framework 4.8 X1 9.5784 ns 0.0195 ns 0.0173 ns 9.5734 ns 0.0076 48 B ContainsFlagGeneric .NET Framework 4.8 .NET Framework 4.8 X1 48.1679 ns 0.1372 ns 0.1216 ns 48.1179 ns 0.0153 96 B ContainsFlagExplicit .NET Framework 4.8 .NET Framework 4.8 X1 0.0102 ns 0.0056 ns 0.0053 ns 0.0111 ns - - DotnetsHasFlag .NET 6.0 .NET 6.0 X1, X2, X4 0.0080 ns 0.0052 ns 0.0049 ns 0.0087 ns - - ContainsFlagGeneric .NET 6.0 .NET 6.0 X1, X2, X4 29.6568 ns 0.0660 ns 0.0617 ns 29.6794 ns 0.0076 96 B ContainsFlagExplicit .NET 6.0 .NET 6.0 X1, X2, X4 0.0006 ns 0.0024 ns 0.0022 ns 0.0000 ns - - DotnetsHasFlag .NET 8.0 .NET 8.0 X1, X2, X4 0.0011 ns 0.0014 ns 0.0013 ns 0.0005 ns - - ContainsFlagGeneric .NET 8.0 .NET 8.0 X1, X2, X4 20.8817 ns 0.0855 ns 0.0714 ns 20.8671 ns 0.0076 96 B ContainsFlagExplicit .NET 8.0 .NET 8.0 X1, X2, X4 0.0003 ns 0.0006 ns 0.0006 ns 0.0000 ns - - DotnetsHasFlag .NET Framework 4.8 .NET Framework 4.8 X1, X2, X4 10.0027 ns 0.0244 ns 0.0216 ns 10.0089 ns 0.0076 48 B ContainsFlagGeneric .NET Framework 4.8 .NET Framework 4.8 X1, X2, X4 48.1968 ns 0.1167 ns 0.1035 ns 48.1573 ns 0.0153 96 B ContainsFlagExplicit .NET Framework 4.8 .NET Framework 4.8 X1, X2, X4 0.0076 ns 0.0029 ns 0.0027 ns 0.0076 ns - - DotnetsHasFlag .NET 6.0 .NET 6.0 X1, X(...) X512 [47] 0.0144 ns 0.0063 ns 0.0056 ns 0.0145 ns - - ContainsFlagGeneric .NET 6.0 .NET 6.0 X1, X(...) X512 [47] 29.5644 ns 0.0550 ns 0.0488 ns 29.5493 ns 0.0076 96 B ContainsFlagExplicit .NET 6.0 .NET 6.0 X1, X(...) X512 [47] 0.0012 ns 0.0021 ns 0.0020 ns 0.0000 ns - - DotnetsHasFlag .NET 8.0 .NET 8.0 X1, X(...) X512 [47] 0.0000 ns 0.0001 ns 0.0001 ns 0.0000 ns - - ContainsFlagGeneric .NET 8.0 .NET 8.0 X1, X(...) X512 [47] 20.8049 ns 0.0664 ns 0.0588 ns 20.8043 ns 0.0076 96 B ContainsFlagExplicit .NET 8.0 .NET 8.0 X1, X(...) X512 [47] 0.0006 ns 0.0010 ns 0.0008 ns 0.0000 ns - - DotnetsHasFlag .NET Framework 4.8 .NET Framework 4.8 X1, X(...) X512 [47] 9.9909 ns 0.0198 ns 0.0165 ns 9.9934 ns 0.0076 48 B ContainsFlagGeneric .NET Framework 4.8 .NET Framework 4.8 X1, X(...) X512 [47] 48.0942 ns 0.0702 ns 0.0622 ns 48.0951 ns 0.0153 96 B ContainsFlagExplicit .NET Framework 4.8 .NET Framework 4.8 X1, X(...) X512 [47] 0.0060 ns 0.0041 ns 0.0038 ns 0.0067 ns - - DotnetsHasFlag .NET 6.0 .NET 6.0 X1, X(...)X1024 [54] 0.0051 ns 0.0049 ns 0.0046 ns 0.0045 ns - - ContainsFlagGeneric .NET 6.0 .NET 6.0 X1, X(...)X1024 [54] 27.9598 ns 0.0830 ns 0.0777 ns 27.9430 ns 0.0076 96 B ContainsFlagExplicit .NET 6.0 .NET 6.0 X1, X(...)X1024 [54] 0.0034 ns 0.0047 ns 0.0044 ns 0.0011 ns - - DotnetsHasFlag .NET 8.0 .NET 8.0 X1, X(...)X1024 [54] 0.0000 ns 0.0001 ns 0.0001 ns 0.0000 ns - - ContainsFlagGeneric .NET 8.0 .NET 8.0 X1, X(...)X1024 [54] 20.5399 ns 0.1075 ns 0.1006 ns 20.5378 ns 0.0076 96 B ContainsFlagExplicit .NET 8.0 .NET 8.0 X1, X(...)X1024 [54] 0.0004 ns 0.0009 ns 0.0008 ns 0.0000 ns - - DotnetsHasFlag .NET Framework 4.8 .NET Framework 4.8 X1, X(...)X1024 [54] 9.9675 ns 0.0257 ns 0.0228 ns 9.9658 ns 0.0076 48 B ContainsFlagGeneric .NET Framework 4.8 .NET Framework 4.8 X1, X(...)X1024 [54] 47.9990 ns 0.1296 ns 0.1149 ns 47.9698 ns 0.0153 96 B ContainsFlagExplicit .NET Framework 4.8 .NET Framework 4.8 X1, X(...)X1024 [54] 0.0055 ns 0.0037 ns 0.0034 ns 0.0054 ns - -"},{"location":"EnumFlagChecks/#testcode","title":"Testcode","text":"Full SourceCode <pre><code>using BenchmarkDotNet.Attributes;\nusing BenchmarkDotNet.Jobs;\n\nnamespace Benchmarkz;\n\n[SimpleJob(RuntimeMoniker.Net48)]\n[SimpleJob(RuntimeMoniker.Net60)]\n[SimpleJob(RuntimeMoniker.Net80)]\n[MemoryDiagnoser(displayGenColumns: true)]\npublic class EnumFlags\n{\n[Params(0x0001,\n        0x0007,\n        0x03FF,\n        0x07FF)]\npublic TestEnum TestEnum;\n\n    [Benchmark]\n    public void DotnetsHasFlag() =&gt; _ = TestEnum.HasFlag(TestEnum.X4);\n\n    [Benchmark]\n    public void ContainsFlagGeneric() =&gt; _ = TestEnum.ContainsFlagGeneric(TestEnum.X4);\n\n    [Benchmark]\n    public void ContainsFlagExplicit() =&gt; _ = TestEnum.ContainsFlag(TestEnum.X4);\n\n}\n\npublic static class EnumExtensions\n{\n    public static bool ContainsFlagGeneric&lt;T&gt;(this T @enum,\n                                              T flagToTest) where T: Enum\n        =&gt; (Convert.ToInt32(@enum) &amp; Convert.ToInt32(flagToTest)) != 0;\n\n    public static bool ContainsFlag(this TestEnum testEnum,\n                                    TestEnum flag) \n        =&gt; (testEnum &amp; flag) != 0;\n}\n\n\n[Flags]\npublic enum TestEnum\n{\nX0 = 0,\nX1 = 1,\nX2 = 1 &lt;&lt; 1,\nX4 = 1 &lt;&lt; 2,\nX8 = 1 &lt;&lt; 3,\nX16 = 1 &lt;&lt; 4,\nX32 = 1 &lt;&lt; 5,\nX64 = 1 &lt;&lt; 6,\nX128 = 1 &lt;&lt; 7,\nX265 = 1 &lt;&lt; 8,\nX512 = 1 &lt;&lt; 9,\nX1024 = 1 &lt;&lt; 10,\n}\n</code></pre>"},{"location":"ListSplits/","title":"ListSplit Benchmarkz","text":""},{"location":"ListSplits/#benchmark-1-chunkofsizet","title":"Benchmark 1: ChunkOfSizeT","text":"<p>The first implementation doesnt preallocate a List and thus yields an overhead as the array has to resized way often.</p>"},{"location":"ListSplits/#code","title":"Code","text":"<pre><code>    public static IEnumerable&lt;List&lt;T&gt;&gt; ToChunksOfMaxSizeN&lt;T&gt;(this IEnumerable&lt;T&gt; toChunk, int maxSize)\n    {\n        if (maxSize &lt;= 0)\n            throw new InvalidEnumArgumentException($\"{nameof(maxSize)} must be greater than 0\");\n\n        var chunk = new List&lt;T&gt;();\n        foreach (var o in toChunk)\n        {\n            chunk.Add(o);\n            if (chunk.Count != maxSize)\n                continue;\n\n            yield return chunk;\n            chunk = [];\n        }\n\n        if (chunk.Any())\n            yield return chunk;\n    }\n</code></pre>"},{"location":"ListSplits/#benchmark-2-listsplit","title":"Benchmark 2: List.Split()","text":"<p>The second implementation is a tad uglier but yields some micro optimizations by buffering the checks and resizing the array that is to be returned on demand</p>"},{"location":"ListSplits/#code_1","title":"Code","text":"<pre><code>internal static IEnumerable&lt;TSource[]&gt; Split&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source,\n                                                          int size)\n    {\n        using var enumerator = source.GetEnumerator();\n\n        if (!enumerator.MoveNext())\n            yield break;\n\n        var arrayBufferSize = Math.Min(size, 4);\n\n        uint chunkIndex;\n        do\n        {\n            var array = new TSource[arrayBufferSize];\n            array[0] = enumerator.Current;\n            chunkIndex = 1;\n\n            if (size != array.Length)\n            {\n                while (chunkIndex &lt; size &amp;&amp; enumerator.MoveNext())\n                {\n                    // Manual resizings still more slim than lists dynamic allocation\n                    if (chunkIndex &gt;= array.Length)\n                    {\n                        arrayBufferSize = Math.Min(size, 2 * array.Length);\n                        Array.Resize(ref array, arrayBufferSize);\n                    }\n\n                    PushToChunk(array);\n                }\n            }\n            else\n            {\n                // ReSharper disable once InlineTemporaryVariable -- Suppresses bounding checks ( not required as resized above )\n                var cache = array;\n                while (chunkIndex &lt; cache.Length &amp;&amp; enumerator.MoveNext())\n                    PushToChunk(array);\n            }\n\n            // Reduces the ( possible ) fragmentation of the last chunky\n            if (chunkIndex != array.Length)\n                Array.Resize(ref array, (int)chunkIndex);\n\n            yield return array;\n        }\n        while (chunkIndex &gt;= size &amp;&amp; enumerator.MoveNext());\n        void PushToChunk(TSource[] array)\n        {\n            array[chunkIndex] = enumerator.Current;\n            chunkIndex += 1;\n        }\n    }\n</code></pre>"},{"location":"ListSplits/#results","title":"Results","text":"<pre><code>// * Summary *                                                                                                                                                                                                                                                                                                                                                                          BenchmarkDotNet v0.13.12, Windows 10 (10.0.19045.4046/22H2/2022Update)                                                                                                                      12th Gen Intel Core i9-12900H, 1 CPU, 20 logical and 14 physical cores                                                                                                                      .NET SDK 8.0.200                                                                                                                                                                              [Host]             : .NET 8.0.2 (8.0.224.6711), X64 RyuJIT AVX2                                                                                                                             .NET 6.0           : .NET 6.0.27 (6.0.2724.6912), X64 RyuJIT AVX2                                                                                                                           .NET 8.0           : .NET 8.0.2 (8.0.224.6711), X64 RyuJIT AVX2                                                                                                                             .NET Framework 4.8 : .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256\n</code></pre> Method Job Runtime ListSize Mean Error StdDev Median Gen0 Gen1 Gen2 Allocated Split10 .NET 6.0 .NET 6.0 0 34.78 ns 0.744 ns 0.796 ns 35.05 ns 0.0095 - - 120 B Split100 .NET 6.0 .NET 6.0 0 36.83 ns 0.130 ns 0.122 ns 36.79 ns 0.0095 - - 120 B Chunk10 .NET 6.0 .NET 6.0 0 43.80 ns 0.265 ns 0.247 ns 43.85 ns 0.0108 - - 136 B Chunk100 .NET 6.0 .NET 6.0 0 43.20 ns 0.122 ns 0.108 ns 43.19 ns 0.0108 - - 136 B Split10 .NET 8.0 .NET 8.0 0 27.15 ns 0.180 ns 0.159 ns 27.16 ns 0.0095 - - 120 B Split100 .NET 8.0 .NET 8.0 0 27.46 ns 0.070 ns 0.062 ns 27.44 ns 0.0095 - - 120 B Chunk10 .NET 8.0 .NET 8.0 0 28.02 ns 0.183 ns 0.171 ns 27.97 ns 0.0108 - - 136 B Chunk100 .NET 8.0 .NET 8.0 0 28.02 ns 0.153 ns 0.136 ns 28.00 ns 0.0108 - - 136 B Split10 .NET Framework 4.8 .NET Framework 4.8 0 42.41 ns 0.089 ns 0.074 ns 42.42 ns 0.0229 - - 144 B Split100 .NET Framework 4.8 .NET Framework 4.8 0 42.31 ns 0.056 ns 0.047 ns 42.31 ns 0.0229 - - 144 B Chunk10 .NET Framework 4.8 .NET Framework 4.8 0 59.18 ns 0.095 ns 0.084 ns 59.18 ns 0.0331 - - 209 B Chunk100 .NET Framework 4.8 .NET Framework 4.8 0 59.27 ns 0.105 ns 0.098 ns 59.27 ns 0.0331 - - 209 B Split10 .NET 6.0 .NET 6.0 1 72.73 ns 0.849 ns 0.753 ns 72.67 ns 0.0223 - - 280 B Split100 .NET 6.0 .NET 6.0 1 73.64 ns 0.234 ns 0.219 ns 73.65 ns 0.0223 - - 280 B Chunk10 .NET 6.0 .NET 6.0 1 79.46 ns 0.268 ns 0.250 ns 79.49 ns 0.0210 - - 264 B Chunk100 .NET 6.0 .NET 6.0 1 79.57 ns 0.225 ns 0.199 ns 79.57 ns 0.0210 - - 264 B Split10 .NET 8.0 .NET 8.0 1 59.04 ns 0.286 ns 0.267 ns 59.04 ns 0.0223 - - 280 B Split100 .NET 8.0 .NET 8.0 1 58.40 ns 0.222 ns 0.185 ns 58.42 ns 0.0223 - - 280 B Chunk10 .NET 8.0 .NET 8.0 1 61.66 ns 0.254 ns 0.237 ns 61.60 ns 0.0210 - - 264 B Chunk100 .NET 8.0 .NET 8.0 1 61.71 ns 0.165 ns 0.154 ns 61.72 ns 0.0210 - - 264 B Split10 .NET Framework 4.8 .NET Framework 4.8 1 82.35 ns 0.184 ns 0.163 ns 82.31 ns 0.0446 - - 281 B Split100 .NET Framework 4.8 .NET Framework 4.8 1 82.35 ns 0.232 ns 0.217 ns 82.30 ns 0.0446 - - 281 B Chunk10 .NET Framework 4.8 .NET Framework 4.8 1 86.41 ns 0.195 ns 0.163 ns 86.41 ns 0.0497 - - 313 B Chunk100 .NET Framework 4.8 .NET Framework 4.8 1 86.59 ns 0.361 ns 0.320 ns 86.55 ns 0.0497 - - 313 B Split10 .NET 6.0 .NET 6.0 20 168.03 ns 0.511 ns 0.478 ns 168.10 ns 0.0350 - - 440 B Split100 .NET 6.0 .NET 6.0 20 174.85 ns 0.596 ns 0.557 ns 174.64 ns 0.0515 - - 648 B Chunk10 .NET 6.0 .NET 6.0 20 221.65 ns 0.825 ns 0.772 ns 221.69 ns 0.0527 - - 664 B Chunk100 .NET 6.0 .NET 6.0 20 187.68 ns 0.618 ns 0.548 ns 187.51 ns 0.0446 - - 560 B Split10 .NET 8.0 .NET 8.0 20 112.32 ns 0.479 ns 0.448 ns 112.24 ns 0.0350 - - 440 B Split100 .NET 8.0 .NET 8.0 20 127.57 ns 0.407 ns 0.380 ns 127.45 ns 0.0515 - - 648 B Chunk10 .NET 8.0 .NET 8.0 20 159.80 ns 0.635 ns 0.594 ns 159.78 ns 0.0527 - - 664 B Chunk100 .NET 8.0 .NET 8.0 20 136.64 ns 0.600 ns 0.532 ns 136.61 ns 0.0446 - - 560 B Split10 .NET Framework 4.8 .NET Framework 4.8 20 184.13 ns 0.570 ns 0.505 ns 184.26 ns 0.0701 - - 441 B Split100 .NET Framework 4.8 .NET Framework 4.8 20 197.53 ns 0.915 ns 0.714 ns 197.50 ns 0.1032 - - 650 B Chunk10 .NET Framework 4.8 .NET Framework 4.8 20 254.25 ns 0.682 ns 0.605 ns 254.15 ns 0.1159 - - 730 B Chunk100 .NET Framework 4.8 .NET Framework 4.8 20 216.60 ns 0.579 ns 0.542 ns 216.73 ns 0.0968 - - 610 B Split10 .NET 6.0 .NET 6.0 1000 4,659.30 ns 7.892 ns 6.996 ns 4,657.81 ns 0.6866 0.0076 - 8696 B Split100 .NET 6.0 .NET 6.0 1000 3,730.50 ns 13.624 ns 12.744 ns 3,729.67 ns 0.4196 0.0038 - 5312 B Chunk10 .NET 6.0 .NET 6.0 1000 7,879.82 ns 38.476 ns 35.991 ns 7,874.00 ns 1.8921 0.0458 - 23816 B Chunk100 .NET 6.0 .NET 6.0 1000 4,705.97 ns 21.447 ns 19.012 ns 4,705.78 ns 0.9766 0.0153 - 12312 B Split10 .NET 8.0 .NET 8.0 1000 2,938.31 ns 11.088 ns 10.372 ns 2,939.48 ns 0.6905 0.0114 - 8696 B Split100 .NET 8.0 .NET 8.0 1000 2,025.02 ns 3.930 ns 3.484 ns 2,024.77 ns 0.4196 0.0038 - 5312 B Chunk10 .NET 8.0 .NET 8.0 1000 5,583.41 ns 19.309 ns 17.117 ns 5,585.56 ns 1.8921 0.0610 - 23816 B Chunk100 .NET 8.0 .NET 8.0 1000 3,116.25 ns 7.714 ns 6.839 ns 3,116.61 ns 0.9804 0.0114 - 12312 B Split10 .NET Framework 4.8 .NET Framework 4.8 1000 5,353.31 ns 17.838 ns 16.686 ns 5,350.57 ns 1.5259 0.0229 - 9628 B Split100 .NET Framework 4.8 .NET Framework 4.8 1000 3,964.31 ns 10.418 ns 9.745 ns 3,963.76 ns 0.8545 0.0076 - 5392 B Chunk10 .NET Framework 4.8 .NET Framework 4.8 1000 8,958.04 ns 18.071 ns 16.019 ns 8,957.69 ns 4.0741 0.1221 - 25643 B Chunk100 .NET Framework 4.8 .NET Framework 4.8 1000 5,587.55 ns 10.221 ns 9.561 ns 5,587.37 ns 1.9913 0.0305 - 12541 B Split10 .NET 6.0 .NET 6.0 10000 44,285.11 ns 197.826 ns 185.047 ns 44,257.20 ns 6.4087 0.7324 - 80824 B Split100 .NET 6.0 .NET 6.0 10000 34,991.80 ns 80.992 ns 75.760 ns 34,968.03 ns 3.6011 0.3052 - 45216 B Chunk10 .NET 6.0 .NET 6.0 10000 76,120.59 ns 284.533 ns 252.231 ns 76,194.53 ns 18.4326 3.4180 - 232744 B Chunk100 .NET 6.0 .NET 6.0 10000 45,649.65 ns 301.484 ns 251.753 ns 45,585.16 ns 9.5825 1.1597 - 120616 B Split10 .NET 8.0 .NET 8.0 10000 27,637.12 ns 115.936 ns 108.446 ns 27,680.14 ns 6.4392 0.9155 - 80824 B Split100 .NET 8.0 .NET 8.0 10000 17,540.92 ns 79.912 ns 70.840 ns 17,526.46 ns 3.6011 0.3357 - 45216 B Chunk10 .NET 8.0 .NET 8.0 10000 51,725.74 ns 207.773 ns 184.186 ns 51,727.44 ns 18.4937 4.3945 - 232744 B Chunk100 .NET 8.0 .NET 8.0 10000 28,468.41 ns 78.064 ns 73.022 ns 28,478.74 ns 9.6130 1.2207 - 120616 B Split10 .NET Framework 4.8 .NET Framework 4.8 10000 52,063.23 ns 589.596 ns 522.662 ns 51,859.29 ns 14.0991 1.5259 - 89070 B Split100 .NET Framework 4.8 .NET Framework 4.8 10000 37,361.94 ns 113.097 ns 100.257 ns 37,354.12 ns 7.3242 0.5493 - 46258 B Chunk10 .NET Framework 4.8 .NET Framework 4.8 10000 89,433.33 ns 354.915 ns 277.095 ns 89,371.21 ns 39.5508 8.7891 - 249509 B Chunk100 .NET Framework 4.8 .NET Framework 4.8 10000 54,527.73 ns 106.232 ns 88.708 ns 54,521.85 ns 19.4702 2.1973 - 122730 B Split10 .NET 6.0 .NET 6.0 1000000 5,533,921.21 ns 22,337.859 ns 19,801.930 ns 5,538,833.98 ns 664.0625 492.1875 492.1875 8249699 B Split100 .NET 6.0 .NET 6.0 1000000 3,607,778.98 ns 10,117.101 ns 9,463.543 ns 3,606,839.45 ns 351.5625 160.1563 - 4452475 B Chunk10 .NET 6.0 .NET 6.0 1000000 22,527,238.86 ns 447,673.764 ns 1,194,931.902 ns 22,096,309.38 ns 2093.7500 1281.2500 500.0000 23449660 B Chunk100 .NET 6.0 .NET 6.0 1000000 5,255,326.38 ns 26,249.182 ns 21,919.255 ns 5,251,902.34 ns 953.1250 468.7500 - 12051877 B Split10 .NET 8.0 .NET 8.0 1000000 4,054,003.67 ns 58,829.348 ns 49,125.170 ns 4,052,357.81 ns 664.0625 492.1875 492.1875 8249696 B Split100 .NET 8.0 .NET 8.0 1000000 1,792,539.66 ns 13,426.802 ns 11,902.511 ns 1,791,585.25 ns 353.5156 320.3125 - 4452473 B Chunk10 .NET 8.0 .NET 8.0 1000000 24,518,900.84 ns 565,878.965 ns 1,668,506.897 ns 23,946,503.12 ns 2312.5000 2281.2500 843.7500 23449754 B Chunk100 .NET 8.0 .NET 8.0 1000000 3,338,952.19 ns 15,577.896 ns 13,008.249 ns 3,333,424.61 ns 957.0313 898.4375 - 12051874 B Split10 .NET Framework 4.8 .NET Framework 4.8 1000000 11,028,185.09 ns 366,288.327 ns 1,080,009.398 ns 10,865,642.19 ns 1437.5000 984.3750 671.8750 9319568 B Split100 .NET Framework 4.8 .NET Framework 4.8 1000000 6,826,392.43 ns 129,384.711 ns 127,073.086 ns 6,811,515.62 ns 812.5000 375.0000 125.0000 4596194 B Chunk10 .NET Framework 4.8 .NET Framework 4.8 1000000 34,659,248.56 ns 680,690.093 ns 931,736.282 ns 34,303,443.75 ns 4062.5000 1812.5000 750.0000 25372642 B Chunk100 .NET Framework 4.8 .NET Framework 4.8 1000000 11,817,508.54 ns 207,145.941 ns 193,764.442 ns 11,794,673.44 ns 2187.5000 1000.0000 468.7500 12310156 B"},{"location":"ListSplits/#analyzing-stuff","title":"Analyzing stuff","text":"<p>Well its obvious. Less allocation and faster using the split thingy</p>"},{"location":"ListSplits/#testcode","title":"Testcode","text":"Full SourceCode <pre><code>using System.ComponentModel;\nusing BenchmarkDotNet.Attributes;\nusing BenchmarkDotNet.Jobs;\n\nnamespace Benchmarkz;\n\n[SimpleJob(RuntimeMoniker.Net48)]\n[SimpleJob(RuntimeMoniker.Net60)]\n[SimpleJob(RuntimeMoniker.Net80)]\n[MemoryDiagnoser]\npublic class ChunkBenchmarks\n{\n    private IEnumerable&lt;uint&gt; dataSet = Enumerable.Empty&lt;uint&gt;();\n\n    [Params(0, 1, 20, 1000, 10000, 1000000)]\n    public uint ListSize = 0;\n\n    [GlobalSetup]\n    public void Setup() =&gt; dataSet = FillArray(ListSize);\n\n    [Benchmark]\n    public void Split10() =&gt; _ = dataSet.Split(10).ToArray();\n    [Benchmark]\n    public void Split100() =&gt; _ = dataSet.Split(100).ToArray();\n\n    [Benchmark]\n    public void Chunk10() =&gt; _ = dataSet.ToChunksOfMaxSizeN(10).ToArray();\n    [Benchmark]\n    public void Chunk100() =&gt; _ = dataSet.ToChunksOfMaxSizeN(100).ToArray();\n\n    private static IEnumerable&lt;uint&gt; FillArray(uint count)\n    {\n        for (uint i = 0; i &lt; count; i++)\n            yield return i;\n    }\n}\n\ninternal static class SplitExtensions\n{\n    internal static IEnumerable&lt;TSource[]&gt; Split&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source,\n                                                          int size)\n    {\n        using var enumerator = source.GetEnumerator();\n\n        if (!enumerator.MoveNext())\n            yield break;\n\n        var arrayBufferSize = Math.Min(size, 4);\n\n        uint chunkIndex;\n        do\n        {\n            var array = new TSource[arrayBufferSize];\n            array[0] = enumerator.Current;\n            chunkIndex = 1;\n\n            if (size != array.Length)\n            {\n                while (chunkIndex &lt; size &amp;&amp; enumerator.MoveNext())\n                {\n                    // Manual resizings still more slim than lists dynamic allocation\n                    if (chunkIndex &gt;= array.Length)\n                    {\n                        arrayBufferSize = Math.Min(size, 2 * array.Length);\n                        Array.Resize(ref array, arrayBufferSize);\n                    }\n\n                    PushToChunk(array);\n                }\n            }\n            else\n            {\n                // ReSharper disable once InlineTemporaryVariable -- Suppresses bounding checks ( not required as resized above )\n                var cache = array;\n                while (chunkIndex &lt; cache.Length &amp;&amp; enumerator.MoveNext())\n                    PushToChunk(array);\n            }\n\n            // Reduces the ( possible ) fragmentation of the last chunky \n            if (chunkIndex != array.Length)\n                Array.Resize(ref array, (int)chunkIndex);\n\n            yield return array;\n        }\n        while (chunkIndex &gt;= size &amp;&amp; enumerator.MoveNext());\n\n        void PushToChunk(TSource[] array)\n        {\n            array[chunkIndex] = enumerator.Current;\n            chunkIndex += 1;\n        }\n    }\n\n    public static IEnumerable&lt;List&lt;T&gt;&gt; ToChunksOfMaxSizeN&lt;T&gt;(this IEnumerable&lt;T&gt; toChunk, int maxSize)\n    {\n        if (maxSize &lt;= 0)\n            throw new InvalidEnumArgumentException($\"{nameof(maxSize)} must be greater than 0\");\n\n        var chunk = new List&lt;T&gt;();\n        foreach (var o in toChunk)\n        {\n            chunk.Add(o);\n            if (chunk.Count != maxSize)\n                continue;\n\n            yield return chunk;\n            chunk = [];\n        }\n\n        if (chunk.Any())\n            yield return chunk;\n    }\n}\n</code></pre>"},{"location":"StringExtract/","title":"String Extraction Benchmarkz","text":"<p>The purpose of this tests was to find out the fastest way to extract parts of a string, in this case the keyvalue pairs  separated by ';' inside of one string.</p> <p>All Tests are performed with the data:</p> <ul> <li>\"param:dt=123\"</li> <li>\"param:dt=123; bla=blub; stichdatum=01.01.2019</li> <li>\"param:dt=123; bla=blub; stichdatum=01.01.2019; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub\"</li> </ul>"},{"location":"StringExtract/#benchmark-1-spliting-the-string","title":"Benchmark 1: Spliting the string","text":"<p>The first test was performedby spliting the string and manually parsing those parts. This is the approach seen quite often however is probably the worst one of those as I expect those two <code>.Split()</code> to hurt us badly</p>"},{"location":"StringExtract/#code","title":"Code","text":"<pre><code>    public static IEnumerable&lt;ParamField&gt; ExtractParamFieldSplit(string? inputString)\n    {\n        if (inputString is not { Length: &gt; 6 })\n            return Enumerable.Empty&lt;ParamField&gt;();\n\n        var paramindex = inputString.IndexOf(\"param:\",\n                                             StringComparison.InvariantCultureIgnoreCase);\n        if (paramindex == -1)\n            return Enumerable.Empty&lt;ParamField&gt;();\n\n        var splits = inputString[(paramindex + 6)..].Split(';');\n        return splits.Select(x =&gt;\n        {\n            var value = x.Split('=');\n            return new ParamField\n            {\n                Key = value[0].Trim(),\n                Value = value[1].Trim()\n            };\n        });\n    }\n</code></pre>"},{"location":"StringExtract/#benchmark-2-using-spans-and-slices","title":"Benchmark 2: Using Spans and Slices","text":"<p>While it's not that fast using net48 there should be a smiliar performance for this small set of data with a way better performance the huger the set grows while using spans and ranges. While there might not be a real performance benefit we'd expect at least some savings due to the reduced allocation.</p>"},{"location":"StringExtract/#code_1","title":"Code","text":"<pre><code>    public static IEnumerable&lt;ParamField&gt; ExtractParamFieldSpan(string? inputString)\n    {\n        if (inputString is not { Length: &gt; 6 })\n            return Enumerable.Empty&lt;ParamField&gt;();\n\n        var identifierIndex = inputString.IndexOf(\"param:\",\n                                                  StringComparison.InvariantCultureIgnoreCase);\n        if (identifierIndex == -1)\n            return Enumerable.Empty&lt;ParamField&gt;();\n\n        var inputAsSpan = inputString.AsSpan();\n        var startIndex = identifierIndex + 6;\n\n        var endOfFirstPair = inputAsSpan.IndexOf(';');\n        var pair = endOfFirstPair &gt; 1\n            ? inputAsSpan.Slice(startIndex,\n                                endOfFirstPair - startIndex)\n            : inputAsSpan[startIndex..];\n\n        var separatorIndex = pair.IndexOf('=');\n        var results = new List&lt;ParamField&gt;();\n        while (separatorIndex != -1)\n        {\n            results.Add(new ParamField\n            {\n                Key = pair[..separatorIndex].Trim().ToString(),\n                Value = pair[(separatorIndex + 1)..].Trim().ToString()\n            });\n\n            pair = pair[(separatorIndex + 1)..];\n            separatorIndex = pair.IndexOf('=');\n        }\n\n        return results;\n    }\n</code></pre>"},{"location":"StringExtract/#benchmark-3-using-a-regex","title":"Benchmark 3: Using a Regex","text":"<p>While I'd argue that the code itself should be quite readable deciphering a regex sucks really bad. It's however undeniable that using a regex in those cases most often performs best when used correctly and is less error prone. Apart from that the allocation should be at about the same level as using spans</p>"},{"location":"StringExtract/#code_2","title":"Code","text":"<p>This regex here however is pretty tiny and just consist of 2 capturing groups, the <code>=</code> separator, and a non-capturing group * <code>(\\w+)</code>Any Alphanumerics to serve as key * <code>=</code> Separates Key and Value * <code>(.*?)</code> Well anything to be used as value * until <code>(?:;|$)</code> which is not captured and observes if a <code>;</code> separates a new key value pair or the end of the input is reached</p> <pre><code>    private static readonly Regex regexRulez = new(@\"(\\w+)=(.*?)(?:;|$)\", RegexOptions.Compiled);\n    public static IEnumerable&lt;ParamField&gt; ExtractParamFieldRegex(string? inputString)\n    {\n        if (inputString is not { Length: &gt; 6 })\n            return Enumerable.Empty&lt;ParamField&gt;();\n\n        var matches = regexRulez.Matches(inputString);\n\n        return matches.Cast&lt;Match&gt;()\n                      .Select(match =&gt; new ParamField\n                      {\n                          Key = match.Groups[1].Value.Trim(),\n                          Value = match.Groups[2].Value.Trim()\n                      });\n    }\n</code></pre>"},{"location":"StringExtract/#results","title":"Results","text":"<pre><code>BenchmarkDotNet v0.13.12, Windows 10 (10.0.19045.3930/22H2/2022Update)\n12th Gen Intel Core i9-12900H, 1 CPU, 20 logical and 14 physical cores\n.NET SDK 8.0.101\n[Host]             : .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2\n.NET 6.0           : .NET 6.0.26 (6.0.2623.60508), X64 RyuJIT AVX2\n.NET 8.0           : .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2\n.NET Framework 4.8 : .NET Framework 4.8 (4.8.4645.0), X64 RyuJIT VectorSize=256\n</code></pre> Method Job Runtime Mean Error StdDev Gen0 Gen1 Allocated SplitExtractSingle .NET 6.0 .NET 6.0 48.98 ns 0.568 ns 0.532 ns 0.0095 - 120 B SplitExtractThree .NET 6.0 .NET 6.0 85.61 ns 1.679 ns 3.070 ns 0.0280 - 352 B SplitExtractTwenty .NET 6.0 .NET 6.0 246.69 ns 1.309 ns 1.161 ns 0.1197 0.0005 1504 B SpanExtractSingle .NET 6.0 .NET 6.0 64.67 ns 1.321 ns 1.852 ns 0.0147 - 184 B SpanExtractThree .NET 6.0 .NET 6.0 62.77 ns 1.208 ns 1.342 ns 0.0147 - 184 B SpanExtractTwenty .NET 6.0 .NET 6.0 62.30 ns 1.237 ns 1.270 ns 0.0147 - 184 B RegexExtractSingle .NET 6.0 .NET 6.0 26.68 ns 0.518 ns 0.960 ns 0.0115 - 144 B RegexExtractThree .NET 6.0 .NET 6.0 26.30 ns 0.534 ns 0.766 ns 0.0115 - 144 B RegexExtractTwenty .NET 6.0 .NET 6.0 26.78 ns 0.557 ns 1.100 ns 0.0115 - 144 B SplitExtractSingle .NET 8.0 .NET 8.0 37.63 ns 0.759 ns 0.844 ns 0.0095 - 120 B SplitExtractThree .NET 8.0 .NET 8.0 63.43 ns 0.232 ns 0.194 ns 0.0280 - 352 B SplitExtractTwenty .NET 8.0 .NET 8.0 185.71 ns 0.863 ns 0.721 ns 0.1197 - 1504 B SpanExtractSingle .NET 8.0 .NET 8.0 42.31 ns 0.201 ns 0.168 ns 0.0147 - 184 B SpanExtractThree .NET 8.0 .NET 8.0 41.99 ns 0.437 ns 0.388 ns 0.0147 - 184 B SpanExtractTwenty .NET 8.0 .NET 8.0 42.70 ns 0.191 ns 0.160 ns 0.0147 - 184 B RegexExtractSingle .NET 8.0 .NET 8.0 19.96 ns 0.388 ns 0.363 ns 0.0115 - 144 B RegexExtractThree .NET 8.0 .NET 8.0 18.94 ns 0.169 ns 0.150 ns 0.0115 - 144 B RegexExtractTwenty .NET 8.0 .NET 8.0 18.86 ns 0.138 ns 0.115 ns 0.0115 - 144 B SplitExtractSingle .NET Framework 4.8 .NET Framework 4.8 97.04 ns 0.465 ns 0.388 ns 0.0343 - 217 B SplitExtractThree .NET Framework 4.8 .NET Framework 4.8 146.96 ns 0.422 ns 0.330 ns 0.0942 - 594 B SplitExtractTwenty .NET Framework 4.8 .NET Framework 4.8 420.07 ns 1.209 ns 1.010 ns 0.4091 0.0038 2576 B SpanExtractSingle .NET Framework 4.8 .NET Framework 4.8 124.91 ns 1.910 ns 1.693 ns 0.0305 - 193 B SpanExtractThree .NET Framework 4.8 .NET Framework 4.8 125.28 ns 2.491 ns 2.447 ns 0.0305 - 193 B SpanExtractTwenty .NET Framework 4.8 .NET Framework 4.8 123.78 ns 0.516 ns 0.431 ns 0.0305 - 193 B RegexExtractSingle .NET Framework 4.8 .NET Framework 4.8 67.39 ns 0.365 ns 0.305 ns 0.0356 - 225 B RegexExtractThree .NET Framework 4.8 .NET Framework 4.8 67.28 ns 0.347 ns 0.307 ns 0.0356 - 225 B RegexExtractTwenty .NET Framework 4.8 .NET Framework 4.8 67.41 ns 0.669 ns 0.626 ns 0.0356 - 225 B"},{"location":"StringExtract/#analyzing-stuff","title":"Analyzing stuff","text":"<p>This result matches my expectations to a great extent. Splitting sucks exponentially while becoming slower and slower.</p> <p>The allocation represents only the allocation during the method calls and not the poco creation. I still wonder why regex performs worse than rangin on old net48 tho...</p>"},{"location":"StringExtract/#testcode","title":"Testcode","text":"Full SourceCode <pre><code>using System.Text.RegularExpressions;\nusing BenchmarkDotNet.Attributes;\nusing BenchmarkDotNet.Jobs;\n\nnamespace Benchmarkz;\n\n[SimpleJob(RuntimeMoniker.Net48)]\n[SimpleJob(RuntimeMoniker.Net60)]\n[SimpleJob(RuntimeMoniker.Net80)]\n[MemoryDiagnoser]\npublic class RangeBenchmarks\n{\nprivate static readonly Regex regexRulez = new(@\"(\\w+)=(.*?)(?:;|$)\",\nRegexOptions.Compiled);\n\n    private const string? JustOne = \"param:dt=123\";\n    private const string? Three = \"param:dt=123; bla=blub; stichdatum=01.01.2019\";\n    private const string? Twenty = \"param:dt=123; bla=blub; stichdatum=01.01.2019; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub; bla=blub\";\n\n    [Benchmark]\n    public void SplitExtractSingle() =&gt; ExtractParamFieldSplit(JustOne);\n\n    [Benchmark]\n    public void SplitExtractThree() =&gt; ExtractParamFieldSplit(Three);\n    [Benchmark]\n    public void SplitExtractTwenty() =&gt; ExtractParamFieldSplit(Twenty);\n\n    [Benchmark]\n    public void SpanExtractSingle() =&gt; ExtractParamFieldSpan(JustOne);\n\n    [Benchmark]\n    public void SpanExtractThree() =&gt; ExtractParamFieldSpan(Three);\n    [Benchmark]\n    public void SpanExtractTwenty() =&gt; ExtractParamFieldSpan(Twenty);\n\n    [Benchmark]\n    public void RegexExtractSingle() =&gt; ExtractParamFieldRegex(JustOne);\n\n    [Benchmark]\n    public void RegexExtractThree() =&gt; ExtractParamFieldRegex(Three);\n\n    [Benchmark]\n    public void RegexExtractTwenty() =&gt; ExtractParamFieldRegex(Twenty);\n\n    public static IEnumerable&lt;ParamField&gt; ExtractParamFieldSplit(string? inputString)\n    {\n        if (inputString is not { Length: &gt; 6 })\n            return Enumerable.Empty&lt;ParamField&gt;();\n\n        var paramindex = inputString.IndexOf(\"param:\",\n                                             StringComparison.InvariantCultureIgnoreCase);\n        if (paramindex == -1)\n            return Enumerable.Empty&lt;ParamField&gt;();\n\n        var splits = inputString[(paramindex + 6)..].Split(';');\n        return splits.Select(x =&gt;\n        {\n            var value = x.Split('=');\n            return new ParamField\n            {\n                Key = value[0].Trim(),\n                Value = value[1].Trim()\n            };\n        });\n    }\n\n    public static IEnumerable&lt;ParamField&gt; ExtractParamFieldSpan(string? inputString)\n    {\n        if (inputString is not { Length: &gt; 6 })\n            return Enumerable.Empty&lt;ParamField&gt;();\n\n        var identifierIndex = inputString.IndexOf(\"param:\",\n                                                  StringComparison.InvariantCultureIgnoreCase);\n        if (identifierIndex == -1)\n            return Enumerable.Empty&lt;ParamField&gt;();\n\n        var inputAsSpan = inputString.AsSpan();\n        var startIndex = identifierIndex + 6;\n\n        var endOfFirstPair = inputAsSpan.IndexOf(';');\n        var pair = endOfFirstPair &gt; 1\n            ? inputAsSpan.Slice(startIndex,\n                                endOfFirstPair - startIndex)\n            : inputAsSpan[startIndex..];\n\n        var separatorIndex = pair.IndexOf('=');\n        var results = new List&lt;ParamField&gt;();\n        while (separatorIndex != -1)\n        {\n            results.Add(new ParamField\n            {\n                Key = pair[..separatorIndex].Trim().ToString(),\n                Value = pair[(separatorIndex + 1)..].Trim().ToString()\n            });\n\n            pair = pair[(separatorIndex + 1)..];\n            separatorIndex = pair.IndexOf('=');\n        }\n\n        return results;\n    }\n\n    public static IEnumerable&lt;ParamField&gt; ExtractParamFieldRegex(string? inputString)\n    {\n        if (inputString is not { Length: &gt; 6 })\n            return Enumerable.Empty&lt;ParamField&gt;();\n\n        var matches = regexRulez.Matches(inputString);\n\n        return matches.Cast&lt;Match&gt;()\n                      .Select(match =&gt; new ParamField\n                      {\n                          Key = match.Groups[1].Value.Trim(),\n                          Value = match.Groups[2].Value.Trim()\n                      });\n    }\n\n    public class ParamField\n    {\n        public string Key { get; set; }\n        public string Value { get; set; }\n    }\n}\n</code></pre>"}]}